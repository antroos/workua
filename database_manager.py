"""
Database Manager –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
"""

import sqlite3
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional

class ResumeDatabase:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ"""
    
    def __init__(self, db_path: str = "resumes.db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        self.db_path = db_path
        self.logger = logging.getLogger(__name__)
        self.init_database()
    
    def init_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—é–º–µ
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS resumes (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        resume_url TEXT UNIQUE NOT NULL,
                        resume_data TEXT NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ URL
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_resume_url 
                    ON resumes(resume_url)
                ''')
                
                conn.commit()
                self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    def save_resume(self, resume_url: str, resume_data: Dict) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –≤ –±–∞–∑—É
        
        Args:
            resume_url: URL —Ä–µ–∑—é–º–µ
            resume_data: –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
            resume_json = json.dumps(resume_data, ensure_ascii=False, indent=2)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR REPLACE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
                cursor.execute('''
                    INSERT OR REPLACE INTO resumes 
                    (resume_url, resume_data, updated_at) 
                    VALUES (?, ?, CURRENT_TIMESTAMP)
                ''', (resume_url, resume_json))
                
                conn.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
                if cursor.rowcount > 0:
                    action = "–æ–±–Ω–æ–≤–ª–µ–Ω–æ" if self.resume_exists(resume_url) else "–¥–æ–±–∞–≤–ª–µ–Ω–æ"
                    self.logger.info(f"‚úÖ –†–µ–∑—é–º–µ {action}: {resume_url}")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è –†–µ–∑—é–º–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {resume_url}")
                    return False
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_url}: {e}")
            return False
    
    def resume_exists(self, resume_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –≤ –±–∞–∑–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT 1 FROM resumes WHERE resume_url = ?', (resume_url,))
                return cursor.fetchone() is not None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def get_resume(self, resume_url: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –ø–æ URL"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT resume_data FROM resumes 
                    WHERE resume_url = ?
                ''', (resume_url,))
                
                result = cursor.fetchone()
                if result:
                    return json.loads(result[0])
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ: {e}")
            return None
    
    def get_all_resumes(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ –∏–∑ –±–∞–∑—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT resume_url, resume_data, created_at, updated_at 
                    FROM resumes 
                    ORDER BY updated_at DESC
                ''')
                
                results = []
                for row in cursor.fetchall():
                    results.append({
                        'resume_url': row[0],
                        'resume_data': json.loads(row[1]),
                        'created_at': row[2],
                        'updated_at': row[3]
                    })
                
                return results
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ: {e}")
            return []
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                cursor.execute('SELECT COUNT(*) FROM resumes')
                total_count = cursor.fetchone()[0]
                
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                cursor.execute('SELECT MAX(updated_at) FROM resumes')
                last_update = cursor.fetchone()[0]
                
                # –†–∞–∑–º–µ—Ä –±–∞–∑—ã
                cursor.execute("SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()")
                db_size = cursor.fetchone()[0]
                
                return {
                    'total_resumes': total_count,
                    'last_update': last_update,
                    'database_size_bytes': db_size,
                    'database_size_mb': round(db_size / 1024 / 1024, 2)
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def export_to_json(self, output_file: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        if not output_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"resumes_export_{timestamp}.json"
        
        try:
            resumes = self.get_all_resumes()
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(resumes, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_file}")
            return output_file
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return ""
    
    def clear_database(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('DELETE FROM resumes')
                conn.commit()
                self.logger.info("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logging.basicConfig(level=logging.INFO)
    
    db = ResumeDatabase("test_resumes.db")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'full_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–∞–Ω–¥–∏–¥–∞—Ç',
        'position': '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å',
        'salary': '50000 –≥—Ä–Ω',
        'skills': ['Python', 'SQL']
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    db.save_resume("https://test.com/resume/1", test_data)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ") 