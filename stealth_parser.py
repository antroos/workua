#!/usr/bin/env python3
"""
Stealth –ø–∞—Ä—Å–µ—Ä Work.ua - ANTI-DETECTION
–≠—Ç–∞–ø 2.5: Multi-tab + –∑–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ + —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
"""

import time
import json
import random
from work_ua_parser import WorkUaParser
from config import PARSING_CONFIG, BROWSER_CONFIG

class StealthWorkUaParser:
    def __init__(self):
        self.parser = WorkUaParser()
        
        # Anti-detection –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.human_delays = True
        self.max_tabs_at_once = 3  # –ù–µ –±–æ–ª–µ–µ 3 –≤–∫–ª–∞–¥–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        self.page_delay_range = (2, 5)  # –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        self.tab_delay_range = (1, 3)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        self.processed_urls = set()
        self.session_stats = {
            'total_processed': 0,
            'duplicates_skipped': 0,
            'errors': 0,
            'pages_processed': 0,
            'tabs_opened': 0,
            'tabs_closed': 0,
            'blocks_detected': 0
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.all_resumes = []
        self.main_tab_handle = None
        
    def human_delay(self, delay_range=None):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
        if not self.human_delays:
            return
            
        if delay_range is None:
            delay_range = self.page_delay_range
            
        delay = random.uniform(delay_range[0], delay_range[1])
        print(f"‚è±Ô∏è –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –ø–∞—É–∑–∞ {delay:.1f}s...")
        time.sleep(delay)
    
    def check_if_blocked(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –º—ã"""
        try:
            current_url = self.parser.driver.current_url
            page_title = self.parser.driver.title.lower()
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            block_indicators = [
                'blocked', 'banned', 'access denied', 'cloudflare',
                'too many requests', 'rate limit', 'captcha'
            ]
            
            for indicator in block_indicators:
                if indicator in current_url.lower() or indicator in page_title:
                    print(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {indicator}")
                    self.session_stats['blocks_detected'] += 1
                    return True
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ work.ua
            try:
                cards = self.parser.find_resume_cards()
                if len(cards) == 0 and "work.ua" in current_url:
                    print("üö´ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É: –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫")
                    return True
            except:
                pass
                
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return True
    
    def get_unique_urls_on_page(self):
        """–ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if self.check_if_blocked():
            print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º")
            return []
        
        all_cards = self.parser.find_resume_cards()
        if not all_cards:
            print("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)")
            return []
        
        unique_urls = []
        for card in all_cards:
            card_info = self.parser.parse_card_info(card)
            if not card_info or not card_info.get('link'):
                continue
                
            resume_url = card_info['link']
            
            if resume_url not in self.processed_urls:
                unique_urls.append({
                    'resume_url': resume_url,
                    'card_info': card_info
                })
            else:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                self.session_stats['duplicates_skipped'] += 1
        
        print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL: {len(unique_urls)} –∏–∑ {len(all_cards)}")
        return unique_urls
    
    def safe_open_tabs_batch(self, resume_urls, batch_size=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–æ–∫ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏"""
        
        if batch_size is None:
            batch_size = self.max_tabs_at_once
            
        print(f"üîÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º {len(resume_urls)} —Ä–µ–∑—é–º–µ –ø–∞—Ä—Ç–∏—è–º–∏ –ø–æ {batch_size}...")
        
        all_opened_tabs = []
        
        for i in range(0, len(resume_urls), batch_size):
            batch = resume_urls[i:i + batch_size]
            print(f"\nüì¶ –ü–∞—Ä—Ç–∏—è {i//batch_size + 1}: {len(batch)} —Ä–µ–∑—é–º–µ")
            
            batch_tabs = []
            for j, url_data in enumerate(batch):
                resume_url = url_data['resume_url']
                card_info = url_data['card_info']
                
                try:
                    print(f"   üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º: {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    
                    # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
                    if j > 0:
                        self.human_delay(self.tab_delay_range)
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
                    self.parser.driver.execute_script(f"window.open('{resume_url}', '_blank');")
                    
                    batch_tabs.append({
                        'url': resume_url,
                        'card_info': card_info,
                        'batch_index': i//batch_size,
                        'tab_index': j
                    })
                    
                    self.session_stats['tabs_opened'] += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏: {e}")
                    self.session_stats['errors'] += 1
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –ø–∞—Ä—Ç–∏—é
            if batch_tabs:
                self._parse_batch_tabs(batch_tabs, i//batch_size + 1)
                all_opened_tabs.extend(batch_tabs)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏
            if i + batch_size < len(resume_urls):
                print(f"‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏...")
                self.human_delay((3, 6))
        
        return all_opened_tabs
    
    def _parse_batch_tabs(self, batch_tabs, batch_num):
        """–ü–∞—Ä—Å–∏–º –æ–¥–Ω—É –ø–∞—Ä—Ç–∏—é –≤–∫–ª–∞–¥–æ–∫"""
        
        print(f"üìã –ü–∞—Ä—Å–∏–º –ø–∞—Ä—Ç–∏—é {batch_num}: {len(batch_tabs)} –≤–∫–ª–∞–¥–æ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –≤–∫–ª–∞–¥–æ–∫
        all_handles = self.parser.driver.window_handles
        main_handle = all_handles[0]
        
        for i, tab_data in enumerate(batch_tabs):
            resume_url = tab_data['url']
            card_info = tab_data['card_info']
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
            tab_handle_index = i + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ 0 - –≥–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
            if tab_handle_index >= len(all_handles):
                print(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ {i+1}")
                continue
                
            tab_handle = all_handles[tab_handle_index]
            
            print(f"\nüìÑ –ü–∞—Ä—Å–∏–º {i+1}/{len(batch_tabs)}: {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            try:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É
                self.parser.driver.switch_to.window(tab_handle)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏...")
                self.human_delay((1, 2))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                if self.check_if_blocked():
                    print("üö´ –í–∫–ª–∞–¥–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
                current_url = self.parser.driver.current_url
                if "/resumes/" not in current_url:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π URL: {current_url}")
                    continue
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                self.processed_urls.add(resume_url)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                print("ü§ñ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ...")
                self.human_delay((0.5, 1.5))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                resume_data = {
                    'url': resume_url,
                    'card_info': card_info,
                    'processed_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                    'batch_number': batch_num,
                    'status': 'success',
                    'method': 'stealth_multitab'
                }
                
                self.all_resumes.append(resume_data)
                self.session_stats['total_processed'] += 1
                
                print("‚úÖ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                self.session_stats['errors'] += 1
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –ø–∞—Ä—Ç–∏–∏
        self._close_batch_tabs(main_handle)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        self.parser.driver.switch_to.window(main_handle)
        self.main_tab_handle = main_handle
    
    def _close_batch_tabs(self, main_handle):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏"""
        
        all_handles = self.parser.driver.window_handles
        
        for handle in all_handles:
            if handle != main_handle:
                try:
                    self.parser.driver.switch_to.window(handle)
                    self.parser.driver.close()
                    self.session_stats['tabs_closed'] += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
    
    def stealth_pagination_test(self, max_pages=3, max_cards_per_page=6):
        """–û—Å–Ω–æ–≤–Ω–æ–π stealth —Ç–µ—Å—Ç"""
        
        print("ü•∑ STEALTH –ü–ê–†–°–ï–† - ANTI-DETECTION + MULTI-TAB")
        print("=" * 80)
        print(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ + –º–∞–ª—ã–µ –ø–∞—Ä—Ç–∏–∏ –≤–∫–ª–∞–¥–æ–∫")
        print(f"üéØ –¶–µ–ª—å: {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, –º–∞–∫—Å {max_cards_per_page} —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        print(f"üì¶ –ü–∞—Ä—Ç–∏–∏: {self.max_tabs_at_once} –≤–∫–ª–∞–¥–æ–∫ –∑–∞ —Ä–∞–∑")
        print("=" * 80)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not self.parser.setup_driver():
                print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º work.ua...")
            if not self.parser.open_page():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                return False
            
            self.main_tab_handle = self.parser.driver.current_window_handle
            self.human_delay()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            for page_num in range(1, max_pages + 1):
                print(f"\nüìÑ –°–¢–†–ê–ù–ò–¶–ê {page_num}")
                print("-" * 60)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if self.check_if_blocked():
                    print("üö´ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                    break
                
                success = self._process_page_stealth(page_num, max_cards_per_page)
                
                if not success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                    break
                
                self.session_stats['pages_processed'] += 1
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if page_num < max_pages:
                    print(f"\n‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}...")
                    self.human_delay()
                    
                    if not self.parser.has_next_page():
                        print("üìÑ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç")
                        break
                        
                    if not self.parser.go_to_next_page():
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        break
                        
                    self.human_delay()
            
            # –ò—Ç–æ–≥–∏
            self._print_stealth_results()
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            try:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                if self.main_tab_handle:
                    all_handles = self.parser.driver.window_handles
                    for handle in all_handles:
                        if handle != self.main_tab_handle:
                            try:
                                self.parser.driver.switch_to.window(handle)
                                self.parser.driver.close()
                            except:
                                pass
                    self.parser.driver.switch_to.window(self.main_tab_handle)
            except:
                pass
            self.parser.close_driver()
    
    def _process_page_stealth(self, page_num, max_cards):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å stealth –ø–æ–¥—Ö–æ–¥–æ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º URL
        unique_urls = self.get_unique_urls_on_page()
        
        if not unique_urls:
            print(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
            return True
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        urls_to_process = unique_urls[:max_cards]
        print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(urls_to_process)} —Ä–µ–∑—é–º–µ —Å—Ç–µ–ª—Å-–º–µ—Ç–æ–¥–æ–º")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—Ç–∏—è–º–∏
        self.safe_open_tabs_batch(urls_to_process)
        
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç–µ–ª—Å-–º–µ—Ç–æ–¥–æ–º")
        return True
    
    def _print_stealth_results(self):
        """–ò—Ç–æ–≥–∏ stealth –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        
        print(f"\n{'='*80}")
        print(f"ü•∑ –ò–¢–û–ì–ò STEALTH –ü–ê–†–°–ò–ù–ì–ê")
        print(f"{'='*80}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['total_processed']} —Ä–µ–∑—é–º–µ")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.session_stats['duplicates_skipped']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.session_stats['errors']}")
        print(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {self.session_stats['blocks_detected']}")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['pages_processed']}")
        print(f"üîÄ –í–∫–ª–∞–¥–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ: {self.session_stats['tabs_opened']}")
        print(f"üóÇÔ∏è –í–∫–ª–∞–¥–æ–∫ –∑–∞–∫—Ä—ã—Ç–æ: {self.session_stats['tabs_closed']}")
        
        if self.session_stats['total_processed'] > 0:
            success_rate = (self.session_stats['total_processed'] / 
                          (self.session_stats['total_processed'] + self.session_stats['errors'])) * 100
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.all_resumes:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"stealth_parsing_results_{timestamp}.json"
            
            data = {
                'session_info': {
                    'timestamp': timestamp,
                    'version': 'stealth_multitab_anti_detection',
                    'stats': self.session_stats,
                    'anti_detection_enabled': True
                },
                'processed_urls': list(self.processed_urls),
                'resumes': self.all_resumes
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ Stealth —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

def main():
    """–ó–∞–ø—É—Å–∫ stealth –ø–∞—Ä—Å–µ—Ä–∞"""
    
    parser = StealthWorkUaParser()
    
    print("ü•∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Stealth:")
    print(f"   –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏: –î–ê")
    print(f"   –ú–∞–∫—Å –≤–∫–ª–∞–¥–æ–∫ –∑–∞ —Ä–∞–∑: {parser.max_tabs_at_once}")
    print(f"   –ó–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: –î–ê")
    print(f"   –ü–∞—Ä—Ç–∏–∏ –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è: –î–ê")
    
    success = parser.stealth_pagination_test(max_pages=2, max_cards_per_page=4)
    
    if success:
        print(f"\nüéâ STEALTH –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"ü•∑ –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª!")
    else:
        print(f"\nüí• Stealth —Ç–µ—Å—Ç –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã")

if __name__ == "__main__":
    main()