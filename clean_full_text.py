#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
"""

import json
import pandas as pd
import re
from datetime import datetime

def clean_full_text(text):
    """–û—á–∏—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∞–π—Ç–∞"""
    if not text:
        return text
    
    # –°–ø–∏—Å–æ–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    cleanup_patterns = [
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å–∞–π—Ç–∞
        r'–®—É–∫–∞—á—É\s*',
        r'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\s*',
        r'–ó–Ω–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤\s*',
        r'–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é\s*',
        r'–£–≤—ñ–π—Ç–∏\s*',
        r'–ö–∞–Ω–¥–∏–¥–∞—Ç–∏\s*',
        r'—É [–ê-–Ø–Ü–á–Ñ–∞-—è—ñ—ó—î\s]+\s*',
        r'–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é\s*',
        r'–ó–±–µ—Ä–µ–≥—Ç–∏\s*',
        r'–©–µ\s*',
        r'–§–∞–π–ª\s*',
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–ª—É–∂–µ–±–Ω–∞—è)
        r'–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\s*',
        r'–®—É–∫–∞—á –≤–∫–∞–∑–∞–≤ —Ç–µ–ª–µ—Ñ–æ–Ω\s*',
        r'—Ç–∞ –µ–ª\. –ø–æ—à—Ç—É\.?\s*',
        r'–ü—Ä—ñ–∑–≤–∏—â–µ, –∫–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Å–≤—ñ—Ç–ª–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤\..*?(?=\n|$)',
        r'–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤.*?(?=\n|$)',
        r'–®—É–∫–∞—á –ø—Ä–∏—Ö–æ–≤–∞–≤ —Å–≤–æ—ó –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ.*?(?=\n|$)',
        r'–∞–ª–µ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.*?(?=\n|$)',
        r'–∞–ª–µ –π–æ–º—É –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.*?(?=\n|$)',
        
        # –î—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        r'–†–µ–∑—é–º–µ –≤—ñ–¥ \d+ [–∞-—è—ñ—ó—î]+ \d+\s*',
        r'PRO\s*',
        r'VIP\s*',
        r'TOP\s*',
        
        # –°—Ö–æ–∂—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∏ –∏ —Ñ—É—Ç–µ—Ä
        r'–°—Ö–æ–∂—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∏.*$',
        r'–ö–∞–Ω–¥–∏–¥–∞—Ç–∏ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.*$',
        r'–ö–∞–Ω–¥–∏–¥–∞—Ç–∏ –∑–∞ –º—ñ—Å—Ç–∞–º–∏.*$',
        r'–ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ —Å–≤–æ—ó –≤–∏–º–æ–≥–∏.*$',
        r'–í–∞–∫–∞–Ω—Å—ñ—ó.*$',
        r'–ü–æ—Å–ª—É–≥–∏ —Å–∞–π—Ç—É.*$',
        r'–ü—Ä–æ –Ω–∞—Å.*$',
        r'–ö–æ–Ω—Ç–∞–∫—Ç–∏.*$',
        r'¬© \d+-\d+ Work\.ua.*$',
        r'–ó—Ä–æ–±–ª–µ–Ω–æ –≤ –∫–æ–º–ø–∞–Ω—ñ—ó.*$',
        r'–û—Å–≤—ñ—Ç–∞ –≤ –£–∫—Ä–∞—ó–Ω—ñ.*$',
        r'Typing tutor.*$',
    ]
    
    cleaned_text = text
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—á–∏—Å—Ç–∫–∏
    for pattern in cleanup_patterns:
        cleaned_text = re.sub(pattern, '', cleaned_text, flags=re.MULTILINE | re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned_text = re.sub(r'\n\s*\n', '\n', cleaned_text)  # –î–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    cleaned_text = re.sub(r'^\s+|\s+$', '', cleaned_text, flags=re.MULTILINE)  # –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
    cleaned_text = cleaned_text.strip()
    
    return cleaned_text

def create_cleaned_csv():
    """–°–æ–∑–¥–∞–µ—Ç CSV —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    print("üßπ –û–ß–ò–°–¢–ö–ê –ü–û–õ–ù–û–ì–û –¢–ï–ö–°–¢–ê –û–¢ –°–õ–£–ñ–ï–ë–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('resume_data_20250801_024557.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑—é–º–µ: {len(data):,}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    export_data = []
    cleaned_count = 0
    
    for index, item in enumerate(data):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ –≥–æ—Ä–æ–¥ –∏–∑ age_location
        age = '–ù–µ —É–∫–∞–∑–∞–Ω'
        location = '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        if item.get('age_location'):
            parts = item['age_location'].split(', ')
            if len(parts) >= 2:
                age = parts[0]
                location = ', '.join(parts[1:])
            else:
                location = item['age_location']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ full_text
        skills = []
        if item.get('full_text'):
            skills_match = re.search(r'–ó–Ω–∞–Ω–Ω—è —ñ –Ω–∞–≤–∏—á–∫–∏\s*([\s\S]*?)(?:\n\n|\n–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è|\n–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é|$)', 
                                   item['full_text'], re.IGNORECASE)
            if skills_match and skills_match.group(1):
                skills_text = skills_match.group(1)
                skills = [s.strip() for s in skills_text.split('\n') if s.strip() and len(s.strip()) > 1]
        
        # –û–ß–ò–©–ê–ï–ú –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        original_full_text = item.get('full_text', '')
        cleaned_full_text = clean_full_text(original_full_text)
        
        if len(cleaned_full_text) < len(original_full_text):
            cleaned_count += 1
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –û–ß–ò–©–ï–ù–ù–´–ú —Ç–µ–∫—Å—Ç–æ–º
        detailed_info = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        detailed_info.append(f"üë§ –ò–º—è: {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        detailed_info.append(f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {item.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        detailed_info.append(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {item.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        detailed_info.append(f"üìç –í–æ–∑—Ä–∞—Å—Ç –∏ –ª–æ–∫–∞—Ü–∏—è: {item.get('age_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        detailed_info.append(f"üîó URL: {item.get('url', item.get('link', '#'))}")
        
        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        if item.get('experience'):
            detailed_info.append("\nüìã –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
            if isinstance(item['experience'], list):
                for exp in item['experience']:
                    detailed_info.append(f"  ‚Ä¢ {exp}")
            else:
                detailed_info.append(f"  ‚Ä¢ {item['experience']}")
        
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if item.get('education_employment'):
            detailed_info.append(f"\nüéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {item['education_employment']}")
        
        # –ù–∞–≤—ã–∫–∏
        if skills:
            detailed_info.append(f"\nüîß –ù–∞–≤—ã–∫–∏ ({len(skills)}):")
            for skill in skills[:15]:
                detailed_info.append(f"  ‚Ä¢ {skill}")
            if len(skills) > 15:
                detailed_info.append(f"  ... –∏ –µ—â–µ {len(skills) - 15} –Ω–∞–≤—ã–∫–æ–≤")
        
        # –û–ß–ò–©–ï–ù–ù–´–ô –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)
        if cleaned_full_text:
            preview_text = cleaned_full_text[:800] if len(cleaned_full_text) > 800 else cleaned_full_text
            detailed_info.append(f"\nüìÑ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ—á–∏—â–µ–Ω–æ): {preview_text}")
            if len(cleaned_full_text) > 800:
                detailed_info.append("...")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
        row = {
            'ID': index + 1,
            '–ò–º—è': item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å': item.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            '–ó–∞—Ä–ø–ª–∞—Ç–∞': item.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            '–ì–æ—Ä–æ–¥': location,
            '–í–æ–∑—Ä–∞—Å—Ç': age,
            '–ù–∞–≤—ã–∫–∏': ', '.join(skills[:10]) if skills else '–ù–µ —É–∫–∞–∑–∞–Ω—ã',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–Ω–∞–≤—ã–∫–æ–≤': len(skills),
            '–û–ø—ã—Ç': ', '.join(item.get('experience', [])) if isinstance(item.get('experience'), list) else str(item.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω')),
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': item.get('education_employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'URL': item.get('url', item.get('link', '#')),
            '–ü–æ–¥—Ä–æ–±–Ω–æ': '\n'.join(detailed_info),
        }
        
        export_data.append(row)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if (index + 1) % 1000 == 0:
            print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {index + 1:,}/{len(data):,}")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    df = pd.DataFrame(export_data)
    
    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_filename = f'resume_data_CLEANED_{timestamp}.csv'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    df.to_csv(csv_filename, index=False, encoding='utf-8-sig')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(df)
    with_names = len(df[df['–ò–º—è'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'])
    with_skills = len(df[df['–ù–∞–≤—ã–∫–∏'] != '–ù–µ —É–∫–∞–∑–∞–Ω—ã'])
    with_salary = len(df[df['–ó–∞—Ä–ø–ª–∞—Ç–∞'] != '–ù–µ —É–∫–∞–∑–∞–Ω–∞'])
    
    print()
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò:")
    print(f"   üìö –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total:,}")
    print(f"   üßπ –û—á–∏—â–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {cleaned_count:,} ({cleaned_count/total*100:.1f}%)")
    print(f"   üë§ –° –∏–º–µ–Ω–∞–º–∏: {with_names:,} ({with_names/total*100:.1f}%)")
    print(f"   üîß –° –Ω–∞–≤—ã–∫–∞–º–∏: {with_skills:,} ({with_skills/total*100:.1f}%)")
    print(f"   üí∞ –° –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {with_salary:,} ({with_salary/total*100:.1f}%)")
    print()
    print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π CSV —Å–æ–∑–¥–∞–Ω: {csv_filename}")
    
    return csv_filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    csv_file = create_cleaned_csv()
    print()
    print("üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìÅ –§–∞–π–ª: {csv_file}")
    print("üßπ –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∞–π—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
    print("üìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

if __name__ == "__main__":
    main()