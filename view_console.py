#!/usr/bin/env python3
"""
–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
"""

import json
import os
from datetime import datetime
from collections import Counter

def load_database():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('–±–∞–∑–∞_—Ä–µ–∑—é–º–µ_–ø–æ–ª–Ω–∞—è.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –±–∞–∑–∞_—Ä–µ–∑—é–º–µ_–ø–æ–ª–Ω–∞—è.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞")
        return []

def format_resume(resume_data, index):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    detailed = resume_data.get('resume_data', {}).get('detailed_info', {})
    card = resume_data.get('resume_data', {}).get('card_info', {})
    
    name = detailed.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    position = detailed.get('position', card.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
    salary = detailed.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    location = detailed.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω')
    age = detailed.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')
    skills = detailed.get('skills', [])
    experience = detailed.get('experience', [])
    url = resume_data.get('resume_url', '#')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    result = f"""
{index}. üë§ {name}
   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}
   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}
   üìç –ì–æ—Ä–æ–¥: {location} | üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
   üîß –ù–∞–≤—ã–∫–∏: {' | '.join(skills[:4])}{'...' if len(skills) > 4 else ''}
   üìã –û–ø—ã—Ç: {len(experience)} –ø–æ–∑–∏—Ü–∏–π
   üîó URL: {url}
"""
    return result

def show_stats(data):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    total = len(data)
    quality_resumes = [d for d in data if d.get('resume_data', {}).get('detailed_info')]
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    all_skills = []
    cities = []
    salaries = []
    positions = []
    
    for resume in quality_resumes:
        detailed = resume['resume_data']['detailed_info']
        
        # –ù–∞–≤—ã–∫–∏
        skills = detailed.get('skills', [])
        all_skills.extend(skills)
        
        # –ì–æ—Ä–æ–¥–∞
        city = detailed.get('location', '')
        if city and city != '–ù–µ —É–∫–∞–∑–∞–Ω':
            cities.append(city)
        
        # –ó–∞—Ä–ø–ª–∞—Ç—ã
        salary = detailed.get('salary', '')
        if salary and '–≥—Ä–Ω' in salary:
            try:
                salary_num = int(''.join(filter(str.isdigit, salary)))
                if salary_num > 0:
                    salaries.append(salary_num)
            except:
                pass
        
        # –î–æ–ª–∂–Ω–æ—Å—Ç–∏
        position = detailed.get('position', '')
        if position and position != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            positions.append(position)
    
    print(f"üìö –í—Å–µ–≥–æ —Ä–µ–∑—é–º–µ: {total}")
    print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {len(quality_resumes)}")
    print(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize('–±–∞–∑–∞_—Ä–µ–∑—é–º–µ_–ø–æ–ª–Ω–∞—è.json')} –±–∞–π—Ç")
    
    if salaries:
        avg_salary = sum(salaries) // len(salaries)
        min_salary = min(salaries)
        max_salary = max(salaries)
        print(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã: {min_salary:,} - {max_salary:,} –≥—Ä–Ω (—Å—Ä–µ–¥–Ω–µ–µ: {avg_salary:,})")
    
    # –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤
    skill_counter = Counter(all_skills)
    if skill_counter:
        print(f"\nüîß –¢–û–ü-5 –ù–ê–í–´–ö–û–í:")
        for skill, count in skill_counter.most_common(5):
            print(f"   ‚Ä¢ {skill}: {count} —Ä–∞–∑")
    
    # –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤
    city_counter = Counter(cities)
    if city_counter:
        print(f"\nüìç –¢–û–ü –ì–û–†–û–î–û–í:")
        for city, count in city_counter.most_common(5):
            print(f"   ‚Ä¢ {city}: {count} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    
    # –¢–æ–ø –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    position_counter = Counter(positions)
    if position_counter:
        print(f"\nüíº –¢–û–ü –î–û–õ–ñ–ù–û–°–¢–ï–ô:")
        for position, count in position_counter.most_common(5):
            print(f"   ‚Ä¢ {position}: {count} —Ä–µ–∑—é–º–µ")
    
    print("=" * 50)

def show_resumes(data, limit=10, filter_type=None, search_term=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—é–º–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered_data = data.copy()
    
    if filter_type == 'quality':
        filtered_data = [d for d in filtered_data if d.get('resume_data', {}).get('detailed_info')]
    elif filter_type == 'kiev':
        filtered_data = [d for d in filtered_data 
                        if '–∫–∏—ó–≤' in d.get('resume_data', {}).get('detailed_info', {}).get('location', '').lower()]
    elif filter_type == 'salary':
        filtered_data = [d for d in filtered_data 
                        if '–≥—Ä–Ω' in d.get('resume_data', {}).get('detailed_info', {}).get('salary', '')]
    elif filter_type == '1c':
        filtered_data = [d for d in filtered_data 
                        if any('1—Å' in skill.lower() 
                              for skill in d.get('resume_data', {}).get('detailed_info', {}).get('skills', []))]
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    if search_term:
        search_lower = search_term.lower()
        filtered_data = [d for d in filtered_data
                        if search_lower in d.get('resume_data', {}).get('detailed_info', {}).get('full_name', '').lower()
                        or search_lower in d.get('resume_data', {}).get('detailed_info', {}).get('position', '').lower()
                        or any(search_lower in skill.lower() 
                              for skill in d.get('resume_data', {}).get('detailed_info', {}).get('skills', []))]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if not filtered_data:
        print("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        return
    
    print(f"\nüìã –†–ï–ó–Æ–ú–ï ({len(filtered_data)} –Ω–∞–π–¥–µ–Ω–æ):")
    print("=" * 70)
    
    for i, resume in enumerate(filtered_data[:limit], 1):
        print(format_resume(resume, i))
    
    if len(filtered_data) > limit:
        print(f"... –∏ –µ—â–µ {len(filtered_data) - limit} —Ä–µ–∑—é–º–µ")

def interactive_menu():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    data = load_database()
    if not data:
        return
    
    while True:
        print("\nüóÇÔ∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–• –†–ï–ó–Æ–ú–ï –ë–£–•–ì–ê–õ–¢–ï–†–û–í")
        print("=" * 40)
        print("1. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("2. üìã –í—Å–µ —Ä–µ–∑—é–º–µ (10 —à—Ç—É–∫)")
        print("3. ‚úÖ –¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ")
        print("4. üèôÔ∏è  –†–µ–∑—é–º–µ –∏–∑ –ö–∏–µ–≤–∞")
        print("5. üí∞ –° —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π")
        print("6. üîß –°–æ –∑–Ω–∞–Ω–∏–µ–º 1–°")
        print("7. üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print("8. üåê –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("9. ‚ùå –í—ã—Ö–æ–¥")
        print()
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-9): ").strip()
        
        if choice == '1':
            show_stats(data)
        elif choice == '2':
            show_resumes(data, limit=10)
        elif choice == '3':
            show_resumes(data, limit=10, filter_type='quality')
        elif choice == '4':
            show_resumes(data, limit=10, filter_type='kiev')
        elif choice == '5':
            show_resumes(data, limit=10, filter_type='salary')
        elif choice == '6':
            show_resumes(data, limit=10, filter_type='1c')
        elif choice == '7':
            search_term = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
            if search_term:
                show_resumes(data, limit=10, search_term=search_term)
        elif choice == '8':
            print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
            os.system("python start_viewer.py 8002 &")
            print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:8002/view_database.html")
        elif choice == '9':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    # –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    import sys
    
    if len(sys.argv) > 1:
        data = load_database()
        command = sys.argv[1].lower()
        
        if command == 'stats':
            show_stats(data)
        elif command == 'all':
            show_resumes(data, limit=20)
        elif command == 'quality':
            show_resumes(data, filter_type='quality')
        elif command == 'kiev':
            show_resumes(data, filter_type='kiev')
        elif command == 'salary':
            show_resumes(data, filter_type='salary')
        elif command == '1c':
            show_resumes(data, filter_type='1c')
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: stats, all, quality, kiev, salary, 1c")
    else:
        interactive_menu() 