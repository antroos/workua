#!/usr/bin/env python3
"""
Bulletproof Work.ua Parser - –ù–ï–£–ë–ò–í–ê–ï–ú–ê–Ø –í–ï–†–°–ò–Ø
‚úÖ Recovery –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
‚úÖ Checkpoint —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
‚úÖ Graceful degradation
"""

import time
import json
import logging
import os
import random
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.common.exceptions import WebDriverException, TimeoutException
from work_ua_parser import WorkUaParser
from config import PARSING_CONFIG, BROWSER_CONFIG

class BulletproofWorkUaParser:
    def __init__(self):
        self.setup_logging()
        self.parser = None
        self.driver_restarts = 0
        self.max_driver_restarts = 3
        
        # Checkpoint —Å–∏—Å—Ç–µ–º–∞
        self.checkpoint_file = f"parsing_checkpoint_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        self.session_state = {
            'current_page': 1,
            'processed_urls': set(),
            'failed_urls': set(),
            'successful_resumes': 0,
            'errors': [],
            'last_checkpoint': None
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.all_resumes = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        self.driver_health_check_interval = 10  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
        self.operations_count = 0
        self.max_consecutive_errors = 5
        self.consecutive_errors = 0
        
        self.logger.info("üöÄ Bulletproof Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_filename = f"bulletproof_parsing_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(funcName)-20s | %(message)s',
            datefmt='%H:%M:%S'
        )
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        
        # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        file_handler = logging.FileHandler(log_filename, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger('BulletproofParser')
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(console_handler)
        self.logger.addHandler(file_handler)
        
        self.logger.info(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_filename}")
    
    def save_checkpoint(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            checkpoint_data = {
                'timestamp': datetime.now().isoformat(),
                'current_page': self.session_state['current_page'],
                'processed_urls': list(self.session_state['processed_urls']),
                'failed_urls': list(self.session_state['failed_urls']),
                'successful_resumes': self.session_state['successful_resumes'],
                'driver_restarts': self.driver_restarts,
                'all_resumes': self.all_resumes
            }
            
            with open(self.checkpoint_file, 'w', encoding='utf-8') as f:
                json.dump(checkpoint_data, f, ensure_ascii=False, indent=2)
                
            self.session_state['last_checkpoint'] = datetime.now().isoformat()
            self.logger.debug(f"üíæ Checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.checkpoint_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è checkpoint: {e}")
    
    def load_checkpoint(self, checkpoint_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ checkpoint –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
        try:
            if not os.path.exists(checkpoint_file):
                self.logger.warning(f"‚ö†Ô∏è Checkpoint —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {checkpoint_file}")
                return False
                
            with open(checkpoint_file, 'r', encoding='utf-8') as f:
                checkpoint_data = json.load(f)
            
            self.session_state['current_page'] = checkpoint_data.get('current_page', 1)
            self.session_state['processed_urls'] = set(checkpoint_data.get('processed_urls', []))
            self.session_state['failed_urls'] = set(checkpoint_data.get('failed_urls', []))
            self.session_state['successful_resumes'] = checkpoint_data.get('successful_resumes', 0)
            self.driver_restarts = checkpoint_data.get('driver_restarts', 0)
            self.all_resumes = checkpoint_data.get('all_resumes', [])
            
            self.logger.info(f"üìÇ Checkpoint –∑–∞–≥—Ä—É–∂–µ–Ω: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {self.session_state['current_page']}, "
                           f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.session_state['processed_urls'])} URL")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ checkpoint: {e}")
            return False
    
    def is_driver_alive(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            if not self.parser or not self.parser.driver:
                return False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            _ = self.parser.driver.title
            self.logger.debug("üíì –î—Ä–∞–π–≤–µ—Ä –∂–∏–≤")
            return True
            
        except WebDriverException as e:
            self.logger.warning(f"üíÄ –î—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    def restart_driver(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        self.logger.warning("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –¥—Ä–∞–π–≤–µ—Ä
            if self.parser and self.parser.driver:
                try:
                    self.parser.driver.quit()
                    self.logger.debug("üóëÔ∏è –°—Ç–∞—Ä—ã–π –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except:
                    pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
            self.parser = WorkUaParser()
            
            # –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä!
            if not self.parser.setup_driver():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
                return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ
            self.logger.info("üåê –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ...")
            base_url = "https://www.work.ua/resumes-%D0%B1%D1%83%D1%85%D0%B3%D0%B0%D0%BB%D1%82%D0%B5%D1%80/"
            self.parser.driver.get(base_url)
                
            self.driver_restarts += 1
            
            # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(5)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
            
            if self.is_driver_alive():
                self.logger.info(f"‚úÖ –î—Ä–∞–π–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (—Ä–µ—Å—Ç–∞—Ä—Ç #{self.driver_restarts})")
                self.consecutive_errors = 0
                return True
            else:
                self.logger.error("‚ùå –ù–æ–≤—ã–π –¥—Ä–∞–π–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    def execute_with_recovery(self, operation_name, operation_func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å recovery –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        self.operations_count += 1
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥—Ä–∞–π–≤–µ—Ä–∞
        if self.operations_count % self.driver_health_check_interval == 0:
            if not self.is_driver_alive():
                self.logger.warning(f"üè• –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                if not self.restart_driver():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
        
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            try:
                self.logger.debug(f"üéØ {operation_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                result = operation_func(*args, **kwargs)
                
                if self.consecutive_errors > 0:
                    self.logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –ø–æ—Å–ª–µ {self.consecutive_errors} –æ—à–∏–±–æ–∫")
                    self.consecutive_errors = 0
                
                return result
                
            except WebDriverException as e:
                self.consecutive_errors += 1
                self.logger.warning(f"‚ö†Ô∏è {operation_name} –æ—à–∏–±–∫–∞ #{self.consecutive_errors}: {e}")
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - —Ä–µ—Å—Ç–∞—Ä—Ç
                if self.consecutive_errors >= self.max_consecutive_errors:
                    self.logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: {self.consecutive_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, —Ä–µ—Å—Ç–∞—Ä—Ç –¥—Ä–∞–π–≤–µ—Ä–∞")
                    
                    if self.driver_restarts >= self.max_driver_restarts:
                        raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤ –¥—Ä–∞–π–≤–µ—Ä–∞: {self.max_driver_restarts}")
                    
                    if not self.restart_driver():
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
                    
                    # –ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self.logger.info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞...")
                    continue
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                time.sleep(2 ** attempt)  # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                self.logger.error(f"‚ùå {operation_name} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                raise
        
        raise Exception(f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_name} –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
    
    def safe_open_tab(self, url, title):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏"""
        def _open_tab():
            self.parser.driver.execute_script(f"window.open('{url}', '_blank');")
            handles = self.parser.driver.window_handles
            self.logger.debug(f"üìÇ –í–∫–ª–∞–¥–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {title} | –í—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {len(handles)}")
            return len(handles)
        
        return self.execute_with_recovery(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏: {title}", _open_tab)
    
    def safe_switch_to_tab(self, tab_index):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É"""
        def _switch_tab():
            handles = self.parser.driver.window_handles
            if tab_index < len(handles):
                self.parser.driver.switch_to.window(handles[tab_index])
                self.logger.debug(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É {tab_index}")
                return True
            return False
        
        return self.execute_with_recovery(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É {tab_index}", _switch_tab)
    
    def safe_close_tab(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏"""
        def _close_tab():
            self.parser.driver.close()
            self.logger.debug("üóëÔ∏è –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            return True
        
        return self.execute_with_recovery("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏", _close_tab)
    
    def safe_get_page_cards(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        def _get_cards():
            cards = self.parser.driver.find_elements(By.CSS_SELECTOR, ".card.resume-link")
            self.logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            
            card_data = []
            for i, card in enumerate(cards):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
                    title_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                    
                    url = title_element.get_attribute("href")
                    title = title_element.text.strip()
                    
                    card_data.append({
                        'index': i,
                        'url': url,
                        'title': title
                    })
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {i}: {e}")
                    continue
            
            return card_data
        
        return self.execute_with_recovery("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫", _get_cards)
    
    def bulletproof_multitab_parsing(self, max_pages=2, max_cards_per_page=5):
        """–ù–µ—É–±–∏–≤–∞–µ–º—ã–π multitab –ø–∞—Ä—Å–∏–Ω–≥"""
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º bulletproof –ø–∞—Ä—Å–∏–Ω–≥: {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, {max_cards_per_page} –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
            if not self.parser:
                self.parser = WorkUaParser()
                
                # –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä!
                self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")
                if not self.parser.setup_driver():
                    raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ
                self.logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ...")
                base_url = "https://www.work.ua/resumes-%D0%B1%D1%83%D1%85%D0%B3%D0%B0%D0%BB%D1%82%D0%B5%D1%80/"
                self.parser.driver.get(base_url)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                time.sleep(3)
                
                self.logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            for page_num in range(self.session_state['current_page'], max_pages + 1):
                self.logger.info(f"\n{'='*80}")
                self.logger.info(f"üìÑ –°–¢–†–ê–ù–ò–¶–ê {page_num}")
                self.logger.info(f"{'='*80}")
                
                self.session_state['current_page'] = page_num
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    all_cards = self.safe_get_page_cards()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    new_cards = []
                    for card in all_cards:
                        if card['url'] not in self.session_state['processed_urls']:
                            new_cards.append(card)
                        else:
                            self.logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {card['title']}")
                    
                    cards_to_process = new_cards[:max_cards_per_page]
                    self.logger.info(f"üéØ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(cards_to_process)} –∏–∑ {len(all_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                    
                    if not cards_to_process:
                        self.logger.info("‚è≠Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        continue
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –ø–∞—Ä—Ç–∏—è–º–∏ –ø–æ 2
                    batch_size = 2
                    for batch_start in range(0, len(cards_to_process), batch_size):
                        batch = cards_to_process[batch_start:batch_start + batch_size]
                        self.logger.info(f"\nüì¶ –ü–∞—Ä—Ç–∏—è {batch_start//batch_size + 1}: {len(batch)} —Ä–µ–∑—é–º–µ")
                        
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
                        opened_tabs = []
                        for card in batch:
                            try:
                                tabs_before = len(self.parser.driver.window_handles)
                                self.safe_open_tab(card['url'], card['title'])
                                opened_tabs.append(card)
                                
                                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –ø–∞—É–∑–∞
                                pause = random.uniform(0.5, 1.5)
                                self.logger.debug(f"‚è±Ô∏è –ü–∞—É–∑–∞ {pause:.1f}s...")
                                time.sleep(pause)
                                
                            except Exception as e:
                                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {card['title']}: {e}")
                                self.session_state['failed_urls'].add(card['url'])
                        
                        # –ü–∞—Ä—Å–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏
                        main_tab = 0
                        for i, card in enumerate(opened_tabs, 1):
                            try:
                                self.safe_switch_to_tab(i)
                                
                                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ
                                self.logger.info(f"üìã –ü–∞—Ä—Å–∏–º: {card['title']}")
                                # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ
                                
                                # –ò–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                                time.sleep(random.uniform(1, 3))
                                
                                self.session_state['processed_urls'].add(card['url'])
                                self.session_state['successful_resumes'] += 1
                                
                                self.safe_close_tab()
                                
                            except Exception as e:
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {card['title']}: {e}")
                                self.session_state['failed_urls'].add(card['url'])
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                        self.safe_switch_to_tab(main_tab)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint
                        self.save_checkpoint()
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏
                        if batch_start + batch_size < len(cards_to_process):
                            pause = random.uniform(3, 7)
                            self.logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏ {pause:.1f}s...")
                            time.sleep(pause)
                    
                    self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è)
                    if page_num < max_pages:
                        self.logger.info(f"‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}...")
                        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                        time.sleep(random.uniform(2, 4))
                
                except Exception as e:
                    self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {e}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.print_final_stats()
            return True
            
        except Exception as e:
            self.logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê: {e}")
            self.save_checkpoint()
            return False
        
        finally:
            self.cleanup()
    
    def print_final_stats(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.logger.info(f"\n{'='*80}")
        self.logger.info(f"üéâ –ò–¢–û–ì–ò BULLETPROOF –ü–ê–†–°–ò–ù–ì–ê")
        self.logger.info(f"{'='*80}")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_state['successful_resumes']} —Ä–µ–∑—é–º–µ")
        self.logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(self.session_state['processed_urls']) - self.session_state['successful_resumes']}")
        self.logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {len(self.session_state['failed_urls'])}")
        self.logger.info(f"üîÑ –†–µ—Å—Ç–∞—Ä—Ç–æ–≤ –¥—Ä–∞–π–≤–µ—Ä–∞: {self.driver_restarts}")
        self.logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {self.session_state['current_page']}")
        self.logger.info(f"üíæ Checkpoint —Ñ–∞–π–ª: {self.checkpoint_file}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.parser and self.parser.driver:
                self.parser.driver.quit()
                self.logger.info("üßπ –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass

if __name__ == "__main__":
    parser = BulletproofWorkUaParser()
    
    # –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å checkpoint –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    # parser.load_checkpoint("parsing_checkpoint_20250731_170000.json")
    
    success = parser.bulletproof_multitab_parsing(max_pages=3, max_cards_per_page=4)
    
    if success:
        print("\nüéä BULLETPROOF –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\nüíÄ BULLETPROOF –ü–ê–†–°–ò–ù–ì –ü–†–ï–†–í–ê–ù, –ù–û CHECKPOINT –°–û–•–†–ê–ù–ï–ù!")