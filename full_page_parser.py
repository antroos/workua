"""
–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Work.ua —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import time
from work_ua_parser import WorkUaParser
from database_manager import ResumeDatabase

def process_full_page():
    """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å LLM –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        print("   export OPENAI_API_KEY='your-api-key-here'")
        return False
    
    print("üöÄ –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–ê–ù–ò–¶–´ –° LLM + –ë–ê–ó–ê –î–ê–ù–ù–´–•")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    parser = WorkUaParser()
    db = ResumeDatabase("work_ua_resumes.db")
    
    processed_count = 0
    failed_count = 0
    skipped_count = 0
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        if not parser.setup_driver():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞")
            return False
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã work.ua...")
        if not parser.open_page():
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        print("üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ...")
        cards = parser.find_resume_cards()
        if not cards:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        total_cards = len(cards)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ")
        print("=" * 70)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        for i in range(total_cards):
            print(f"\nüìÑ –†–ï–ó–Æ–ú–ï {i+1}/{total_cards}")
            print("-" * 50)
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è stale elements)
                current_cards = parser.find_resume_cards()
                if i >= len(current_cards):
                    print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    skipped_count += 1
                    continue
                
                current_card = current_cards[i]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–∞—Ä—Ç–æ—á–∫–∏
                card_info = parser.parse_card_info(current_card)
                resume_url = card_info.get('link', '')
                
                if not resume_url:
                    print(f"‚ö†Ô∏è URL —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫–µ {i+1}")
                    skipped_count += 1
                    continue
                
                print(f"üîó URL: {resume_url}")
                print(f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {card_info.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –±–∞–∑–µ
                if db.resume_exists(resume_url):
                    print(f"‚ÑπÔ∏è –†–µ–∑—é–º–µ —É–∂–µ –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    skipped_count += 1
                    continue
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ
                print("üëÜ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ...")
                if not parser.click_card(current_card):
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∑—é–º–µ {i+1}")
                    failed_count += 1
                    continue
                
                print("‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é LLM
                print("ü§ñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LLM...")
                start_time = time.time()
                
                llm_details = parser.parse_resume_with_llm()
                
                llm_time = time.time() - start_time
                
                if llm_details:
                    print(f"üéâ LLM —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫ –¥–∞–Ω–Ω—ã–µ –∑–∞ {llm_time:.1f}—Å")
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ LLM –¥–∞–Ω–Ω—ã–µ
                    full_resume_data = {
                        'card_info': card_info,
                        'llm_details': llm_details,
                        'processing_info': {
                            'processed_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                            'llm_processing_time': round(llm_time, 2),
                            'method': 'LLM_OpenAI_GPT35'
                        }
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                    if db.save_resume(resume_url, full_resume_data):
                        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É")
                        processed_count += 1
                        
                        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        name = llm_details.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        position = llm_details.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        print(f"üë§ {name} - {position}")
                        
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
                        failed_count += 1
                else:
                    print("‚ùå LLM –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
                    failed_count += 1
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
                print("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É...")
                if parser.go_back():
                    print("‚úÖ –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É")
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    time.sleep(1)
                else:
                    print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Å–ø–∏—Å–∫—É")
                    # –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    print("üîÑ –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    if not parser.open_page():
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        break
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ {i+1}: {e}")
                failed_count += 1
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
                try:
                    parser.go_back()
                except:
                    parser.open_page()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'='*70}")
        print(f"üéØ –ò–¢–û–ì–ò –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –°–¢–†–ê–ù–ò–¶–´")
        print(f"{'='*70}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} —Ä–µ–∑—é–º–µ")
        print(f"‚ùå –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {failed_count} —Ä–µ–∑—é–º–µ")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} —Ä–µ–∑—é–º–µ")
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_cards} —Ä–µ–∑—é–º–µ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_stats = db.get_stats()
        print(f"\nüíæ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        print(f"   üìà –í—Å–µ–≥–æ —Ä–µ–∑—é–º–µ –≤ –±–∞–∑–µ: {db_stats.get('total_resumes', 0)}")
        print(f"   üíø –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {db_stats.get('database_size_mb', 0)} MB")
        print(f"   üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_stats.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        if processed_count > 0:
            print(f"\nüìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            export_file = db.export_to_json()
            if export_file:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {export_file}")
        
        return processed_count > 0
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        print(f"\nüîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
        parser.close_driver()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ï–†–ê WORK.UA")
    print("=" * 70)
    
    success = process_full_page()
    
    if success:
        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É: work_ua_resumes.db")
        print(f"üìÑ JSON —ç–∫—Å–ø–æ—Ä—Ç —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–Ω")
    else:
        print(f"\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    
    print(f"\nüîó –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   python -c \"from database_manager import ResumeDatabase; db=ResumeDatabase('work_ua_resumes.db'); print(db.get_stats())\"")

if __name__ == "__main__":
    main() 