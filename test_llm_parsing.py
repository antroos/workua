"""
–¢–µ—Å—Ç LLM –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ
"""

import os
from work_ua_parser import WorkUaParser

def test_llm_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é LLM"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        print("   export OPENAI_API_KEY='your-api-key-here'")
        return False
    
    print("üöÄ –¢–ï–°–¢ LLM –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)
    
    parser = WorkUaParser()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
        if not parser.setup_driver():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞")
            return False
            
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if not parser.open_page():
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False
            
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
        cards = parser.find_resume_cards()
        if not cards:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        if not parser.click_card(cards[0]):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
            return False
            
        print("‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ")
        
        # –¢–ï–°–¢–ò–†–£–ï–ú LLM –ü–ê–†–°–ò–ù–ì
        print("\nü§ñ –¢–ï–°–¢–ò–†–£–ï–ú LLM –ü–ê–†–°–ò–ù–ì...")
        llm_result = parser.parse_resume_with_llm()
        
        if llm_result:
            print("üéâ LLM –ü–ê–†–°–ò–ù–ì –£–°–ü–ï–®–ï–ù!")
            print("=" * 50)
            print("üìä –ò–ó–í–õ–ï–ß–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print("=" * 50)
            
            for key, value in llm_result.items():
                if isinstance(value, list):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ–º
                    value_strings = [str(item) for item in value]
                    print(f"{key}: {', '.join(value_strings)}")
                else:
                    print(f"{key}: {value}")
                    
            print("=" * 50)
            return True
        else:
            print("‚ùå LLM –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        parser.close_driver()

if __name__ == "__main__":
    test_llm_parsing() 