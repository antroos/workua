"""
Work.ua Resume Parser
–ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—é–º–µ —Å —Å–∞–π—Ç–∞ work.ua
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import json
import csv
from config import BROWSER_CONFIG


class WorkUaParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.driver = None
        self.base_url = "https://www.work.ua/resumes-%D0%B1%D1%83%D1%85%D0%B3%D0%B0%D0%BB%D1%82%D0%B5%D1%80/"
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        chrome_options = Options()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        chrome_options.add_argument(f"--window-size={BROWSER_CONFIG['window_size'][0]},{BROWSER_CONFIG['window_size'][1]}")
        
        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω headless —Ä–µ–∂–∏–º
        if BROWSER_CONFIG['headless']:
            chrome_options.add_argument("--headless")
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è Chrome –¥—Ä–∞–π–≤–µ—Ä–∞
            service = Service(ChromeDriverManager().install())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
            self.driver.implicitly_wait(BROWSER_CONFIG['implicit_wait'])
            
            print("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
        
    def open_page(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—é–º–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            print(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.base_url}")
            self.driver.get(self.base_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            current_url = self.driver.current_url
            page_title = self.driver.title
            
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
            print(f"   URL: {current_url}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_title}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if "work.ua" in current_url and ("—Ä–µ–∑—é–º–µ" in page_title.lower() or "resume" in current_url):
                print("‚úÖ –ú—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ work.ua")
                return True
            else:
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ –Ω–∞ —Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
        
    def find_resume_cards(self):
        """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
            
        try:
            print("–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from config import SELECTORS
            card_selector = SELECTORS['resume_cards']
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {card_selector}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            time.sleep(3)
            
            # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.driver.find_elements(By.CSS_SELECTOR, card_selector)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ: {len(cards)}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if len(cards) < 5:  # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–∞–ª–æ, –ø—Ä–æ–≤–µ—Ä–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                
                # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                alt_cards1 = self.driver.find_elements(By.CSS_SELECTOR, ".card.resume-link")
                print(f"   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä '.card.resume-link': {len(alt_cards1)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                alt_cards2 = self.driver.find_elements(By.CSS_SELECTOR, "div.card")
                print(f"   –°–µ–ª–µ–∫—Ç–æ—Ä 'div.card': {len(alt_cards2)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–∑—é–º–µ
                container = self.driver.find_elements(By.ID, "pjax-resume-list")
                if container:
                    print(f"   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #pjax-resume-list –Ω–∞–π–¥–µ–Ω")
                    # –ò—â–µ–º –≤—Å–µ div –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    divs_in_container = container[0].find_elements(By.TAG_NAME, "div")
                    print(f"   –í—Å–µ–≥–æ div –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {len(divs_in_container)}")
                else:
                    print("   ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #pjax-resume-list –ù–ï –ù–ê–ô–î–ï–ù")
            
            if len(cards) > 0:
                print("üìã –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫:")
                for i, card in enumerate(cards[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
                        title_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                        title = title_element.text.strip()
                        link = title_element.get_attribute("href")
                        print(f"   {i+1}. {title}")
                        print(f"      –°—Å—ã–ª–∫–∞: {link}")
                    except Exception as e:
                        print(f"   {i+1}. [–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}]")
                        
                return cards
            else:
                print("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return []
        
    def parse_card_info(self, card):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if not card:
            return None
            
        try:
            card_info = {}
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—é–º–µ –∏ —Å—Å—ã–ª–∫–∞
            try:
                title_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                card_info['title'] = title_element.text.strip()
                card_info['link'] = title_element.get_attribute("href")
            except:
                card_info['title'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                card_info['link'] = ""
            
            # –ó–∞—Ä–ø–ª–∞—Ç–∞
            try:
                salary_element = card.find_element(By.CSS_SELECTOR, ".h5.strong-600")
                card_info['salary'] = salary_element.text.strip()
            except:
                card_info['salary'] = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –ò–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ - –∏—â–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            try:
                # –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–ª–æ–≤–µ–∫–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è)
                personal_paragraphs = card.find_elements(By.CSS_SELECTOR, "p.mt-xs.mb-0")
                personal_info_found = False
                
                for p in personal_paragraphs:
                    text = p.text.strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç strong-600 –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–≥—Ä–Ω")
                    if text and "–≥—Ä–Ω" not in text and len(text.split(",")) >= 2:
                        card_info['personal_info'] = text
                        parts = text.split(', ')
                        if len(parts) >= 1:
                            card_info['name'] = parts[0]
                        if len(parts) >= 2:
                            card_info['age_location'] = ', '.join(parts[1:])
                        personal_info_found = True
                        break
                
                if not personal_info_found:
                    card_info['personal_info'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    card_info['name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    card_info['age_location'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
            except Exception as e:
                card_info['personal_info'] = "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"
                card_info['name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                card_info['age_location'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            try:
                experience_elements = card.find_elements(By.CSS_SELECTOR, "ul.mt-lg.mb-0 li")
                if experience_elements:
                    experience_list = []
                    for exp in experience_elements[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –æ–ø—ã—Ç–∞
                        exp_text = exp.text.strip()
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        if exp_text and exp_text not in ["PRO", "–§–∞–π–ª", ""]:
                            experience_list.append(exp_text)
                    card_info['experience'] = experience_list
                else:
                    card_info['experience'] = []
            except:
                card_info['experience'] = []
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/—Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            try:
                education_elements = card.find_elements(By.CSS_SELECTOR, "p.mb-0.mt-xs.text-default-7")
                if education_elements:
                    card_info['education_employment'] = education_elements[0].text.strip()
                else:
                    card_info['education_employment'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            except:
                card_info['education_employment'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            return card_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None
        
    def click_card(self, card):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä—å –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if not card or not self.driver:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
            
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            link_element = card.find_element(By.CSS_SELECTOR, "h2 a")
            link_url = link_element.get_attribute("href")
            title = link_element.text.strip()
            
            print(f"üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ: '{title}'")
            print(f"   URL: {link_url}")
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
            link_element.click()
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ
            current_url = self.driver.current_url
            if "/resumes/" in current_url and current_url != self.base_url:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ")
                print(f"   –¢–µ–∫—É—â–∏–π URL: {current_url}")
                return True
            else:
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è")
                print(f"   –¢–µ–∫—É—â–∏–π URL: {current_url}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ: {e}")
            return False
        
    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        try:
            print("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...")
            current_url_before = self.driver.current_url
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
            self.driver.back()
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å
            current_url_after = self.driver.current_url
            
            if current_url_after != current_url_before:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
                print(f"   –¢–µ–∫—É—â–∏–π URL: {current_url_after}")
                return True
            else:
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥: {e}")
            return False
        
    def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            print("–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
            self.driver.quit()
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


if __name__ == "__main__":
    parser = WorkUaParser()
    print("Work.ua Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –¥—Ä–∞–π–≤–µ—Ä + —Å—Ç—Ä–∞–Ω–∏—Ü–∞ + –ø–æ–∏—Å–∫ + –ø–∞—Ä—Å–∏–Ω–≥ + –ø–µ—Ä–µ—Ö–æ–¥
    if parser.setup_driver():
        print("–î—Ä–∞–π–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        if parser.open_page():
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞")
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ
            cards = parser.find_resume_cards()
            if cards:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                print(f"\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ü–ï–†–ï–•–û–î –í –ö–ê–†–¢–û–ß–ö–£:")
                first_card = cards[0]
                
                # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
                card_info = parser.parse_card_info(first_card)
                if card_info:
                    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É: {card_info['title']}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä—å –∫–∞—Ä—Ç–æ—á–∫–∏
                if parser.click_card(first_card):
                    print("üéâ –ü–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –°–µ–π—á–∞—Å –º—ã –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∑—é–º–µ")
                    time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                    if parser.go_back():
                        print("üéâ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–µ–Ω! –ú—ã —Å–Ω–æ–≤–∞ –Ω–∞ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—é–º–µ")
                        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
                        cards_after_return = parser.find_resume_cards()
                        if cards_after_return:
                            print(f"‚úÖ –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ {len(cards_after_return)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                        else:
                            print("‚ö†Ô∏è –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
                    
            else:
                print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            
        parser.close_driver()
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä") 