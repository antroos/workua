"""
Work.ua Resume Parser
–ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—é–º–µ —Å —Å–∞–π—Ç–∞ work.ua
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException
from webdriver_manager.chrome import ChromeDriverManager
import time
import json
import csv
import logging
import datetime
import openai
from config import BROWSER_CONFIG, PARSING_CONFIG


class WorkUaParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.driver = None
        self.base_url = "https://www.work.ua/resumes-%D0%B1%D1%83%D1%85%D0%B3%D0%B0%D0%BB%D1%82%D0%B5%D1%80/"
        self.setup_logging()
        self.max_retries = 3
        self.retry_delay = 2
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_filename = f"work_ua_parser_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_filename, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info("Work.ua Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def retry_operation(self, operation, operation_name, max_retries=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        if max_retries is None:
            max_retries = self.max_retries
            
        for attempt in range(max_retries + 1):
            try:
                result = operation()
                if attempt > 0:
                    self.logger.info(f"‚úÖ {operation_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                return result
            except Exception as e:
                if attempt < max_retries:
                    self.logger.warning(f"‚ö†Ô∏è {operation_name} –Ω–µ—É–¥–∞—á–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1}): {e}")
                    time.sleep(self.retry_delay)
                else:
                    self.logger.error(f"‚ùå {operation_name} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ {max_retries + 1} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    raise e
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        def _setup():
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            chrome_options = Options()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            chrome_options.add_argument(f"--window-size={BROWSER_CONFIG['window_size'][0]},{BROWSER_CONFIG['window_size'][1]}")
            
            # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω headless —Ä–µ–∂–∏–º
            if BROWSER_CONFIG['headless']:
                chrome_options.add_argument("--headless")
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-web-security")
            
            try:
                # üîß BULLETPROOF –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                self.logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromeDriverManager...")
                
                import signal
                def timeout_handler(signum, frame):
                    raise TimeoutError("ChromeDriverManager –∑–∞–≤–∏—Å!")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 15 —Å–µ–∫—É–Ω–¥
                signal.signal(signal.SIGALRM, timeout_handler)
                signal.alarm(15)
                
                try:
                    service = Service(ChromeDriverManager().install())
                    signal.alarm(0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                    self.logger.info("‚úÖ ChromeDriverManager —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                except (TimeoutError, KeyboardInterrupt):
                    signal.alarm(0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                    self.logger.warning("‚ö†Ô∏è ChromeDriverManager –∑–∞–≤–∏—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä...")
                    # Fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π chromedriver
                    service = Service()  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π PATH
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                self.driver.implicitly_wait(BROWSER_CONFIG['implicit_wait'])
                
                self.logger.info("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
                raise e
        
        try:
            return self.retry_operation(_setup, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞")
        except Exception as e:
            self.logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
        
    def open_page(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—é–º–µ"""
        if not self.driver:
            self.logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        def _open():
            self.logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.base_url}")
            
            try:
                self.driver.get(self.base_url)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å WebDriverWait
                wait = WebDriverWait(self.driver, 10)
                wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                current_url = self.driver.current_url
                page_title = self.driver.title
                
                self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
                self.logger.info(f"   URL: {current_url}")
                self.logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if "work.ua" in current_url and ("—Ä–µ–∑—é–º–µ" in page_title.lower() or "resume" in current_url):
                    self.logger.info("‚úÖ –ú—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ work.ua")
                    return True
                else:
                    self.logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ –Ω–∞ —Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    return False
                    
            except TimeoutException:
                self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                raise
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                raise
        
        try:
            return self.retry_operation(_open, "–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        except Exception as e:
            self.logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
        
    def find_resume_cards(self):
        """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
            
        try:
            print("–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from config import SELECTORS
            card_selector = SELECTORS['resume_cards']
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {card_selector}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            time.sleep(3)
            
            # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.driver.find_elements(By.CSS_SELECTOR, card_selector)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ: {len(cards)}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if len(cards) < 5:  # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–∞–ª–æ, –ø—Ä–æ–≤–µ—Ä–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                
                # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                alt_cards1 = self.driver.find_elements(By.CSS_SELECTOR, ".card.resume-link")
                print(f"   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä '.card.resume-link': {len(alt_cards1)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                alt_cards2 = self.driver.find_elements(By.CSS_SELECTOR, "div.card")
                print(f"   –°–µ–ª–µ–∫—Ç–æ—Ä 'div.card': {len(alt_cards2)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–∑—é–º–µ
                container = self.driver.find_elements(By.ID, "pjax-resume-list")
                if container:
                    print(f"   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #pjax-resume-list –Ω–∞–π–¥–µ–Ω")
                    # –ò—â–µ–º –≤—Å–µ div –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    divs_in_container = container[0].find_elements(By.TAG_NAME, "div")
                    print(f"   –í—Å–µ–≥–æ div –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {len(divs_in_container)}")
                else:
                    print("   ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #pjax-resume-list –ù–ï –ù–ê–ô–î–ï–ù")
                
                # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø –°–ï–õ–ï–ö–¢–û–†–û–í —Å LLM
                if len(cards) <= 2 and hasattr(self, '_initial_cards_count') and self._initial_cards_count > 5:
                    print("ü§ñ –ê–ö–¢–ò–í–ò–†–£–ï–ú –ê–í–¢–û–ê–î–ê–ü–¢–ê–¶–ò–Æ –°–ï–õ–ï–ö–¢–û–†–û–í...")
                    new_cards = self._auto_adapt_selectors_with_llm()
                    if new_cards and len(new_cards) > len(cards):
                        print(f"‚úÖ LLM –Ω–∞—à–µ–ª –ª—É—á—à–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã! –ö–∞—Ä—Ç–æ—á–µ–∫: {len(new_cards)}")
                        return new_cards
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if not hasattr(self, '_initial_cards_count') and len(cards) > 5:
                self._initial_cards_count = len(cards)
                print(f"üìù –ó–∞–ø–æ–º–Ω–∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            
            if len(cards) > 0:
                print("üìã –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫:")
                for i, card in enumerate(cards[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
                        title_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                        title = title_element.text.strip()
                        link = title_element.get_attribute("href")
                        print(f"   {i+1}. {title}")
                        print(f"      –°—Å—ã–ª–∫–∞: {link}")
                    except Exception as e:
                        print(f"   {i+1}. [–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}]")
                        
                return cards
            else:
                print("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return []
        
    def _fast_find_element(self, parent, selector, timeout=0.5):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
        old_timeout = self.driver.timeouts.implicit_wait
        try:
            self.driver.implicitly_wait(timeout)
            return parent.find_element(By.CSS_SELECTOR, selector)
        except:
            return None
        finally:
            self.driver.implicitly_wait(old_timeout)
    
    def _fast_find_elements(self, parent, selector, timeout=0.5):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
        old_timeout = self.driver.timeouts.implicit_wait
        try:
            self.driver.implicitly_wait(timeout)
            return parent.find_elements(By.CSS_SELECTOR, selector)
        except:
            return []
        finally:
            self.driver.implicitly_wait(old_timeout)

    def parse_card_info(self, card):
        """‚ö° –ë–´–°–¢–†–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if not card:
            return None
            
        try:
            card_info = {}
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—é–º–µ –∏ —Å—Å—ã–ª–∫–∞ - –ë–ï–ó –¥–æ–ª–≥–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π
            title_element = self._fast_find_element(card, "h2 a")
            if title_element:
                card_info['title'] = title_element.text.strip()
                card_info['link'] = title_element.get_attribute("href")
                card_info['url'] = title_element.get_attribute("href")  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ULTIMATE –ø–∞—Ä—Å–µ—Ä–æ–º
            else:
                card_info['title'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                card_info['link'] = ""
                card_info['url'] = ""
            
            # –ó–∞—Ä–ø–ª–∞—Ç–∞ - –±—ã—Å—Ç—Ä–æ
            salary_element = self._fast_find_element(card, ".h5.strong-600")
            card_info['salary'] = salary_element.text.strip() if salary_element else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –ò–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ - –±—ã—Å—Ç—Ä–æ
            personal_paragraphs = self._fast_find_elements(card, "p.mt-xs.mb-0")
            personal_info_found = False
            
            for p in personal_paragraphs:
                text = p.text.strip()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç strong-600 –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–≥—Ä–Ω")
                if text and "–≥—Ä–Ω" not in text and len(text.split(",")) >= 2:
                    card_info['personal_info'] = text
                    parts = text.split(', ')
                    card_info['name'] = parts[0] if len(parts) >= 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    card_info['age_location'] = ', '.join(parts[1:]) if len(parts) >= 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    personal_info_found = True
                    break
            
            if not personal_info_found:
                card_info['personal_info'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                card_info['name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                card_info['age_location'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –±—ã—Å—Ç—Ä–æ
            experience_elements = self._fast_find_elements(card, "ul.mt-lg.mb-0 li")
            experience_list = []
            for exp in experience_elements[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –æ–ø—ã—Ç–∞
                exp_text = exp.text.strip()
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if exp_text and exp_text not in ["PRO", "–§–∞–π–ª", ""]:
                    experience_list.append(exp_text)
            card_info['experience'] = experience_list
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/—Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ - –±—ã—Å—Ç—Ä–æ
            education_elements = self._fast_find_elements(card, "p.mb-0.mt-xs.text-default-7")
            card_info['education_employment'] = education_elements[0].text.strip() if education_elements else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            return card_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None

    def _auto_adapt_selectors_with_llm(self):
        """ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø –°–ï–õ–ï–ö–¢–û–†–û–í —Å –ø–æ–º–æ—â—å—é LLM"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é LLM...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—É—Ä–µ–∑–∞–Ω–Ω—ã–π –¥–ª—è LLM)
            page_source = self.driver.page_source
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å HTML –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_source, 'html.parser')
            
            # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Ä–µ–∑—é–º–µ
            potential_containers = []
            
            # 1. –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å "resume" –≤ id/class
            for elem in soup.find_all(attrs={'class': True}):
                classes = ' '.join(elem.get('class', []))
                if 'resume' in classes.lower() or 'card' in classes.lower():
                    potential_containers.append({
                        'tag': elem.name,
                        'classes': classes,
                        'id': elem.get('id', ''),
                        'text_sample': elem.get_text()[:100] if elem.get_text() else ''
                    })
            
            # 2. –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
            potential_containers = potential_containers[:10]
            
            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å–Ω–∏–º–æ–∫ –¥–ª—è LLM
            html_analysis = "–ê–ù–ê–õ–ò–ó DOM –°–¢–†–£–ö–¢–£–†–´:\n"
            html_analysis += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(potential_containers)}\n\n"
            
            for i, container in enumerate(potential_containers[:5]):
                html_analysis += f"{i+1}. –¢–µ–≥: <{container['tag']}>\n"
                html_analysis += f"   –ö–ª–∞—Å—Å—ã: {container['classes']}\n"
                html_analysis += f"   ID: {container['id']}\n"
                html_analysis += f"   –¢–µ–∫—Å—Ç: {container['text_sample'][:50]}...\n\n"
            
            # 4. –ó–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            analysis_prompt = f"""–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞ work.ua —Å —Ä–µ–∑—é–º–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤.

–ó–ê–î–ê–ß–ê: –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ.

–¢–ï–ö–£–©–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: 
- –°—Ç–∞—Ä—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä ".card.resume-link" –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ 1 –∫–∞—Ä—Ç–æ—á–∫—É –≤–º–µ—Å—Ç–æ 14
- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä "#pjax-resume-list" –ø—Ä–æ–ø–∞–ª –ø–æ—Å–ª–µ PJAX –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

{html_analysis}

–í–ï–†–ù–ò JSON —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏:
{{
    "container_selector": "–Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
    "card_selector": "–Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫",
    "confidence": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è",
    "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"
}}

–°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ú–ò –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ PJAX –∑–∞–≥—Ä—É–∑–∫–∏."""

            # 5. –í—ã–∑–æ–≤ LLM
            response = self.call_llm_for_analysis(analysis_prompt)
            
            if response and 'card_selector' in response:
                new_selector = response['card_selector']
                print(f"ü§ñ LLM –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–µ–ª–µ–∫—Ç–æ—Ä: {new_selector}")
                print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.get('confidence', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
                print(f"üí≠ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {response.get('reasoning', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                
                # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                test_cards = self.driver.find_elements(By.CSS_SELECTOR, new_selector)
                print(f"üß™ –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: –Ω–∞–π–¥–µ–Ω–æ {len(test_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                if len(test_cards) > 2:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
                    self._update_selector_config(new_selector)
                    return test_cards
                    
            print("‚ùå LLM –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏–∏: {e}")
            return None
    
    def call_llm_for_analysis(self, prompt):
        """–í—ã–∑–æ–≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            from openai import OpenAI
            import json
            
            client = OpenAI()
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–±-—Å–∫—Ä–µ–π–ø–∏–Ω–≥—É –∏ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π HTML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ JSON."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                max_tokens=500
            )
            
            content = response.choices[0].message.content.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            if content.startswith('```json'):
                content = content.replace('```json', '').replace('```', '').strip()
            
            return json.loads(content)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def _update_selector_config(self, new_selector):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open('config.py', 'r', encoding='utf-8') as f:
                config_content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
            import re
            pattern = r"'resume_cards':\s*'[^']+'"
            replacement = f"'resume_cards': '{new_selector}'"
            
            updated_config = re.sub(pattern, replacement, config_content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open('config.py', 'w', encoding='utf-8') as f:
                f.write(updated_config)
                
            print(f"üíæ –°–µ–ª–µ–∫—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤ config.py: {new_selector}")
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º backup —Ñ–∞–π–ª
            import datetime
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"selector_backup_{timestamp}.txt"
            with open(backup_filename, 'w', encoding='utf-8') as f:
                f.write(f"–î–∞—Ç–∞: {datetime.datetime.now()}\n")
                f.write(f"–ù–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {new_selector}\n")
                f.write(f"–ü—Ä–∏—á–∏–Ω–∞: –ê–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏—è LLM\n")
            
            print(f"üíæ –°–æ–∑–¥–∞–Ω backup: {backup_filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    # ========================================
    # –ú–ï–¢–û–î–´ –ü–ê–ì–ò–ù–ê–¶–ò–ò –° –ê–í–¢–û–ê–î–ê–ü–¢–ê–¶–ò–ï–ô
    # ========================================
    
    def has_next_page(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            from config import SELECTORS, PARSING_CONFIG
            main_selector = SELECTORS['pagination_next']
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            print(f"   –°–µ–ª–µ–∫—Ç–æ—Ä: {main_selector}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            next_elements = self.driver.find_elements(By.CSS_SELECTOR, main_selector)
            
            if next_elements:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ disabled)
                next_element = next_elements[0]
                if not next_element.get_attribute("class") or "disabled" not in next_element.get_attribute("class"):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä")
                    return True
            
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
            print(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ...")
            
            alt_selectors = SELECTORS.get('pagination_next_alt', [])
            for i, alt_selector in enumerate(alt_selectors):
                try:
                    alt_elements = self.driver.find_elements(By.CSS_SELECTOR, alt_selector)
                    if alt_elements:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä #{i+1}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –±—É–¥—É—â–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                        self._update_pagination_selector(alt_selector)
                        return True
                except Exception as e:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
            if PARSING_CONFIG.get('pagination_auto_adapt', True):
                print(f"ü§ñ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º LLM –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏—é –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
                return self._auto_adapt_pagination_selectors()
            
            print(f"‚ùå –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
    
    def go_to_next_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π"""
        try:
            from config import SELECTORS, PARSING_CONFIG
            
            print(f"üìÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_url = self.driver.current_url
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            main_selector = SELECTORS['pagination_next']
            next_elements = self.driver.find_elements(By.CSS_SELECTOR, main_selector)
            
            if not next_elements:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                alt_selectors = SELECTORS.get('pagination_next_alt', [])
                for alt_selector in alt_selectors:
                    try:
                        next_elements = self.driver.find_elements(By.CSS_SELECTOR, alt_selector)
                        if next_elements:
                            main_selector = alt_selector
                            break
                    except Exception:
                        continue
            
            if not next_elements:
                print(f"‚ùå –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            next_button = next_elements[0]
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –≤–∏–¥–∏–º—ã–º
            print(f"üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", next_button)
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
            try:
                WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, main_selector))
                )
                print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∫–ª–∏–∫—É")
            except TimeoutException:
                print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π, –ø—Ä–æ–±—É–µ–º JavaScript click...")
            
            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É (–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤)
            print(f"üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            
            # –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            try:
                next_button.click()
                print(f"‚úÖ –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω")
            except Exception as e1:
                print(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e1}")
                
                # –°–ø–æ—Å–æ–± 2: JavaScript –∫–ª–∏–∫
                try:
                    print(f"üîß –ü—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫...")
                    self.driver.execute_script("arguments[0].click();", next_button)
                    print(f"‚úÖ JavaScript –∫–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω")
                except Exception as e2:
                    print(f"‚ö†Ô∏è JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                    
                    # –°–ø–æ—Å–æ–± 3: –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
                    try:
                        print(f"üîß –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞...")
                        link_inside = next_button.find_element(By.TAG_NAME, "a")
                        if link_inside:
                            print(f"üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞, –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π...")
                            self.driver.execute_script("arguments[0].click();", link_inside)
                            print(f"‚úÖ –ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ —É—Å–ø–µ—à–µ–Ω")
                        else:
                            raise Exception("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    except Exception as e3:
                        print(f"‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º LLM –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏—é
                        if PARSING_CONFIG.get('pagination_auto_adapt', True):
                            print(f"ü§ñ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º LLM –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏—é —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤...")
                            if self._auto_adapt_pagination_selectors():
                                # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
                                return self.go_to_next_page()
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å: {e1}, {e2}, {e3}")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            timeout = PARSING_CONFIG.get('pagination_wait_timeout', 15)
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({timeout}s)...")
            
            # –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            WebDriverWait(self.driver, timeout).until(
                lambda driver: driver.current_url != current_url or 
                self._page_content_changed(current_url)
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ PJAX –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(PARSING_CONFIG.get('delay_between_pages', 2))
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, "pjax-resume-list"))
                )
                print(f"‚úÖ PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, SELECTORS['resume_cards']))
                )
                print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
            except TimeoutException:
                print(f"‚ö†Ô∏è PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.driver.refresh()
                time.sleep(3)
            
            new_url = self.driver.current_url
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            print(f"   –ù–æ–≤—ã–π URL: {new_url}")
            
            return True
            
        except TimeoutException:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            return False
    
    def _page_content_changed(self, original_url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            from config import SELECTORS
            
            # –ï—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ—á–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if self.driver.current_url != original_url:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å —á–µ—Ä–µ–∑ PJAX)
            cards = self.driver.find_elements(By.CSS_SELECTOR, SELECTORS['resume_cards'])
            return len(cards) > 0
            
        except Exception:
            return False
    
    def _auto_adapt_pagination_selectors(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM"""
        print("ü§ñ LLM –∞–Ω–∞–ª–∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_source = self.driver.page_source
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é BeautifulSoup
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_source, 'html.parser')
            
            # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_elements = []
            
            # –ò—â–µ–º nav, pagination, page-link –∏ —Ç.–¥.
            for elem in soup.find_all(['nav', 'ul', 'div'], attrs={'class': True}):
                classes = ' '.join(elem.get('class', []))
                if any(keyword in classes.lower() for keyword in ['pagination', 'page', 'nav']):
                    pagination_elements.append({
                        'tag': elem.name,
                        'classes': classes,
                        'id': elem.get('id', ''),
                        'text_sample': elem.get_text()[:100] if elem.get_text() else ''
                    })
            
            if not pagination_elements:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∞–Ω–∞–ª–∏–∑ –¥–ª—è LLM
            html_analysis = "–ê–ù–ê–õ–ò–ó –ü–ê–ì–ò–ù–ê–¶–ò–ò:\n"
            html_analysis += f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(pagination_elements)}\n\n"
            
            for i, elem in enumerate(pagination_elements[:5]):
                html_analysis += f"{i+1}. –¢–µ–≥: <{elem['tag']}>\n"
                html_analysis += f"   –ö–ª–∞—Å—Å—ã: {elem['classes']}\n"
                html_analysis += f"   ID: {elem['id']}\n"
                html_analysis += f"   –¢–µ–∫—Å—Ç: {elem['text_sample'][:50]}...\n\n"
            
            # –ó–∞–ø—Ä–æ—Å –∫ LLM
            analysis_prompt = f"""–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π HTML –ø–∞–≥–∏–Ω–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ work.ua.

–ó–ê–î–ê–ß–ê: –ù–∞–π—Ç–∏ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞".

–ü–†–û–ë–õ–ï–ú–ê: –°–µ–ª–µ–∫—Ç–æ—Ä "#pjax-resume-list > nav > ul.pagination.pagination-small.visible-xs-block > li.circle-style.add-left-sm" –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.

{html_analysis}

–í–ï–†–ù–ò JSON —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º:
{{
    "next_page_selector": "—Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
    "confidence": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è",
    "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞"
}}

–°–µ–ª–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É/—Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""

            # –í—ã–∑–æ–≤ LLM
            response = self.call_llm_for_analysis(analysis_prompt)
            
            if response and 'next_page_selector' in response:
                new_selector = response['next_page_selector']
                print(f"ü§ñ LLM –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {new_selector}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                test_elements = self.driver.find_elements(By.CSS_SELECTOR, new_selector)
                if test_elements:
                    print(f"‚úÖ –ù–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    self._update_pagination_selector(new_selector)
                    return True
                else:
                    print(f"‚ùå –ù–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            return False
    
    def _update_pagination_selector(self, new_selector):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open('config.py', 'r', encoding='utf-8') as f:
                config_content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            import re
            pattern = r'"pagination_next":\s*"[^"]+"'
            replacement = f'"pagination_next": "{new_selector}"'
            
            updated_config = re.sub(pattern, replacement, config_content)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open('config.py', 'w', encoding='utf-8') as f:
                f.write(updated_config)
                
            print(f"üíæ –°–µ–ª–µ–∫—Ç–æ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_selector}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        
    def click_card(self, card):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä—å –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if not card or not self.driver:
            self.logger.error("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
            
        def _click():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞
                self.driver.current_url  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
                
                # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                link_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                link_url = link_element.get_attribute("href")
                title = link_element.text.strip()
                
                self.logger.info(f"üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ: '{title}'")
                self.logger.info(f"   URL: {link_url}")
                
                # –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
                link_element.click()
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å timeout
                wait = WebDriverWait(self.driver, 15)
                wait.until(lambda driver: "/resumes/" in driver.current_url)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ
                current_url = self.driver.current_url
                if "/resumes/" in current_url and current_url != self.base_url:
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ")
                    self.logger.info(f"   –¢–µ–∫—É—â–∏–π URL: {current_url}")
                    return True
                else:
                    self.logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è")
                    self.logger.warning(f"   –¢–µ–∫—É—â–∏–π URL: {current_url}")
                    return False
                    
            except TimeoutException:
                self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
                raise
            except StaleElementReferenceException:
                self.logger.error("‚ùå Stale element –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ")
                raise
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ: {e}")
                raise
        
        try:
            return self.retry_operation(_click, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ä—Ç–æ—á–∫—É", max_retries=2)
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫: {e}")
            return False

    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if not self.driver:
            self.logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        def _go_back():
            try:
                self.logger.info("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
                current_url_before = self.driver.current_url
                self.logger.info(f"URL –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞: {current_url_before}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ —Å –∫–æ—Ä–æ—Ç–∫–∏–º timeout
                self.driver.set_page_load_timeout(10)  # –£–º–µ–Ω—å—à–∞–µ–º timeout –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                self.driver.back()
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å WebDriverWait
                wait = WebDriverWait(self.driver, 10)
                wait.until(lambda driver: driver.current_url != current_url_before)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å
                current_url_after = self.driver.current_url
                self.logger.info(f"URL –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: {current_url_after}")
                
                if current_url_after != current_url_before:
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
                    self.logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
                    pjax_wait = WebDriverWait(self.driver, 15)
                    
                    try:
                        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        pjax_wait.until(EC.presence_of_element_located((By.ID, "pjax-resume-list")))
                        self.logger.info("‚úÖ PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        pjax_wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#pjax-resume-list .card.resume-link")))
                        self.logger.info("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                        time.sleep(1)
                        
                    except TimeoutException:
                        self.logger.warning("‚ö†Ô∏è PJAX –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∑–∞ 15 —Å–µ–∫—É–Ω–¥")
                        # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        self.logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                        try:
                            self.driver.get(self.base_url)
                            time.sleep(3)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—è–≤–∏–ª–∏—Å—å
                            wait_cards = WebDriverWait(self.driver, 10)
                            wait_cards.until(EC.presence_of_element_located((By.CSS_SELECTOR, ".card.resume-link")))
                            self.logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                        except Exception as e:
                            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π timeout
                    self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                    return True
                else:
                    self.logger.warning("‚ö†Ô∏è URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è")
                    return False
                    
            except TimeoutException:
                self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                except:
                    pass
                raise
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥: {e}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ  
                try:
                    self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                except:
                    pass
                raise
        
        try:
            return self.retry_operation(_go_back, "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥", max_retries=2)
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –µ—â–µ –¥—Ä–∞–π–≤–µ—Ä
            try:
                self.driver.current_url
                self.logger.info("–î—Ä–∞–π–≤–µ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except:
                self.logger.critical("‚ùå –î—Ä–∞–π–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            return False
            
    def check_driver_alive(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            if self.driver:
                self.driver.current_url
                return True
            return False
        except Exception as e:
            self.logger.error(f"–î—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
            return False

    def parse_resume_details(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—é–º–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ
            current_url = self.driver.current_url
            if "/resumes/" not in current_url:
                print("‚ö†Ô∏è –ú—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ")
                return None
            
            print("üìã –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—é–º–µ...")
            
            # –ü–†–û–°–¢–û –ë–ï–†–ï–ú –í–ï–°–¨ –¢–ï–ö–°–¢ –°–¢–†–ê–ù–ò–¶–´ - –ë–ï–ó –õ–ò–®–ù–ï–ô –§–ò–ì–ù–ò
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
                full_page_text = self.driver.find_element(By.TAG_NAME, "body").text
                
                resume_details = {
                    'full_text': full_page_text,
                    'resume_url': current_url,
                    'parsing_time': '< 1 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 2 –º–∏–Ω—É—Ç!'
                }
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                resume_details = {
                    'full_text': '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è',
                    'resume_url': current_url
                }
            
            print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞")
            return resume_details
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None

    def parse_resume_with_llm(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é LLM"""
        if not self.driver:
            self.logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ
            current_url = self.driver.current_url
            if "/resumes/" not in current_url:
                self.logger.warning("‚ö†Ô∏è –ú—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ")
                return None
            
            self.logger.info("ü§ñ –ò–∑–≤–ª–µ–∫–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_html = self.driver.page_source
            
            # –û—á–∏—â–∞–µ–º HTML –æ—Ç –ª–∏—à–Ω–µ–≥–æ (—Å–∫—Ä–∏–ø—Ç—ã, —Å—Ç–∏–ª–∏)
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_html, 'html.parser')
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in soup(['script', 'style', 'nav', 'header', 'footer']):
                element.decompose()
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            main_content = soup.get_text(separator=' ', strip=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ (ChatGPT –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
            if len(main_content) > 8000:
                main_content = main_content[:8000] + "..."
            
            self.logger.info(f"üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(main_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è ChatGPT
            prompt = f"""
–ò–∑–≤–ª–µ–∫–∏ –ü–û–õ–ù–£–Æ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—é–º–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{main_content}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
    "full_name": "–ø–æ–ª–Ω–æ–µ –∏–º—è",
    "position": "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", 
    "salary": "–∑–∞—Ä–ø–ª–∞—Ç–∞",
    "age": "–≤–æ–∑—Ä–∞—Å—Ç",
    "location": "–≥–æ—Ä–æ–¥",
    "birth_date": "–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
    "address": "–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å",
    "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)",
    "education": [
        "–ü–û–õ–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ —Å –≥–æ–¥–∞–º–∏, —É—á–µ–±–Ω—ã–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏, –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏"
    ],
    "experience": [
        "–î–ï–¢–ê–õ–¨–ù–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–º–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º–∏, –∫–æ–º–ø–∞–Ω–∏–µ–π, –ø–µ—Ä–∏–æ–¥–æ–º"
    ],
    "professional_skills": [
        "–ü–û–î–†–û–ë–ù–´–ï –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –∑–Ω–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
    ],
    "personal_skills": [
        "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
    ],
    "languages": [
        "–ó–Ω–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º"
    ],
    "additional_info": "–í–°–Ø –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "detailed_description": "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
}}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ò–∑–≤–ª–µ–∫–∞–π –í–°–Æ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ë–ï–ó —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
- –í education - –ü–û–õ–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π —Å –≥–æ–¥–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
- –í experience - –î–ï–¢–ê–õ–¨–ù–´–ï –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
- –í professional_skills - –í–°–ï —É–ø–æ–º—è–Ω—É—Ç—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞–≤—ã–∫–∏
- –°–æ—Ö—Ä–∞–Ω—è–π –í–ï–°–¨ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∂–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–æ–ª—å—à–∞—è - –≤–∫–ª—é—á–∞–π –µ—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é
- –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON
"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
            self.logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
            
            try:
                client = openai.OpenAI()
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ–∑—é–º–µ. –ò–∑–≤–ª–µ–∫–∞–µ—à—å –ü–û–õ–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ –ë–ï–ó —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=4000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    temperature=0.1
                )
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                llm_response = response.choices[0].message.content.strip()
                self.logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏
                if llm_response.startswith('```json'):
                    llm_response = llm_response[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                if llm_response.startswith('```'):
                    llm_response = llm_response[3:]   # –£–±–∏—Ä–∞–µ–º ```
                if llm_response.endswith('```'):
                    llm_response = llm_response[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                llm_response = llm_response.strip()
                
                # –ü–∞—Ä—Å–∏–º JSON
                try:
                    resume_data = json.loads(llm_response)
                    resume_data['resume_url'] = current_url
                    resume_data['parsed_with'] = 'OpenAI GPT-3.5'
                    
                    self.logger.info("üéâ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é LLM")
                    return resume_data
                    
                except json.JSONDecodeError as e:
                    self.logger.warning("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–π JSON –æ—Ç OpenAI, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
                    self.logger.warning(f"–û—à–∏–±–∫–∞: {e}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–π JSON
                    try:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
                        fixed_json = self._fix_incomplete_json(llm_response)
                        if fixed_json:
                            resume_data = json.loads(fixed_json)
                            resume_data['resume_url'] = current_url
                            resume_data['parsed_with'] = 'OpenAI GPT-3.5 (fixed)'
                            
                            self.logger.info("üõ†Ô∏è JSON –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                            return resume_data
                    except:
                        pass
                    
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON –æ—Ç OpenAI")
                    self.logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {llm_response[:500]}...")
                    return None
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ parse_resume_with_llm: {e}")
            return None
    
    def _fix_incomplete_json(self, broken_json: str) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–π JSON"""
        try:
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
            broken_json = broken_json.strip()
            
            # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ/–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
            open_braces = broken_json.count('{')
            close_braces = broken_json.count('}')
            open_brackets = broken_json.count('[')
            close_brackets = broken_json.count(']')
            
            # –ï—Å–ª–∏ JSON –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—ë
            if broken_json.endswith('"') and not broken_json.endswith('",') and not broken_json.endswith('"]'):
                pass  # JSON —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
            elif not broken_json.endswith('"') and not broken_json.endswith(',') and not broken_json.endswith('}') and not broken_json.endswith(']'):
                # –ï—Å–ª–∏ –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –∑–Ω–∞—á–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫—É
                if '"' in broken_json.split('\n')[-1]:
                    broken_json += '"'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
            for _ in range(open_brackets - close_brackets):
                broken_json += ']'
            
            for _ in range(open_braces - close_braces):
                broken_json += '}'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª—Å—è –≤–∞–ª–∏–¥–Ω—ã–π JSON
            json.loads(broken_json)
            return broken_json
            
        except Exception as e:
            self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON: {e}")
            return None

    def process_all_cards(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
            
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫...")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.find_resume_cards()
            if not cards:
                print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            total_cards = len(cards)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            processed_resumes = []
            successful_count = 0
            failed_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∏–∑–±–µ–≥–∞–µ–º stale reference)
            for i in range(total_cards):
                try:
                    print(f"\n{'='*60}")
                    print(f"üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–†–¢–û–ß–ö–£ {i+1}/{total_cards}")
                    print(f"{'='*60}")
                    
                    # –ó–ê–ù–û–í–û –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è stale reference
                    current_cards = self.find_resume_cards()
                    if not current_cards or i >= len(current_cards):
                        print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                        failed_count += 1
                        continue
                    
                    current_card = current_cards[i]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–∞—Ä—Ç–æ—á–∫–∏
                    card_info = self.parse_card_info(current_card)
                    if not card_info:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                        failed_count += 1
                        continue
                    
                    print(f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞: {card_info['title']}")
                    print(f"üë§ –ò–º—è: {card_info['name']}")
                    print(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {card_info['salary']}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ
                    if self.click_card(current_card):
                        print(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ {i+1}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é LLM
                        details = self.parse_resume_with_llm()
                        
                        if details:
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            full_resume_data = {
                                'card_number': i+1,
                                'card_info': card_info,
                                'detailed_info': details,
                                'processing_status': 'success'
                            }
                            
                            processed_resumes.append(full_resume_data)
                            successful_count += 1
                            
                            print(f"‚úÖ –†–µ–∑—é–º–µ {i+1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                            print(f"   –ü–æ–ª–Ω–æ–µ –∏–º—è: {details['full_name']}")
                            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–≤—ã–∫–∞–º
                            prof_skills = details.get('professional_skills', [])
                            if prof_skills and len(prof_skills) > 0:
                                print(f"   –ù–∞–≤—ã–∫–∏: {prof_skills[0]}")
                            else:
                                print(f"   –ù–∞–≤—ã–∫–∏: –ù–µ —É–∫–∞–∑–∞–Ω—ã")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—é–º–µ {i+1}")
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            partial_data = {
                                'card_number': i+1,
                                'card_info': card_info,
                                'detailed_info': None,
                                'processing_status': 'partial'
                            }
                            processed_resumes.append(partial_data)
                            failed_count += 1
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                        if self.go_back():
                            print(f"‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                            time.sleep(1.5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è
                            
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É {i+1}")
                        failed_count += 1
                        continue
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    progress = ((i+1) / total_cards) * 100
                    print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({i+1}/{total_cards})")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞—Ä—Ç–æ—á–µ–∫
                    if i < total_cards - 1:
                        time.sleep(0.5)
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}: {e}")
                    failed_count += 1
                    continue
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\n{'='*60}")
            print(f"üìä –ò–¢–û–ì–ò –ú–ê–°–°–û–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
            print(f"{'='*60}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
            print(f"üìã –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_cards}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_count/total_cards)*100:.1f}%")
            print(f"{'='*60}")
            
            return processed_resumes
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return []

    def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.driver:
                self.logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –¥—Ä–∞–π–≤–µ—Ä
                try:
                    self.driver.current_url
                    self.driver.quit()
                    self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    self.logger.warning(f"–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–ª, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: {e}")
                    try:
                        self.driver.quit()
                    except:
                        pass
                
                self.driver = None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        finally:
            self.driver = None


if __name__ == "__main__":
    parser = WorkUaParser()
    print("Work.ua Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è - –ø–µ—Ä–≤—ã–µ 3)
    if parser.setup_driver():
        print("–î—Ä–∞–π–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        if parser.open_page():
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞")
            
            # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–ì–ò–ù–ê–¶–ò–ò
            processed_resumes = []
            successful_count = 0
            failed_count = 0
            total_pages_processed = 0
            total_cards_across_pages = 0
            
            max_pages = PARSING_CONFIG.get('max_pages', 10)
            pagination_enabled = PARSING_CONFIG.get('enable_pagination', True)
            
            print(f"\nüöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–õ–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô:")
            print(f"üìÑ –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {max_pages}")
            print(f"üîÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if pagination_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
            print(f"{'='*50}")
            
            # –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ü–ê–ì–ò–ù–ê–¶–ò–ò
            current_page = 1
            while current_page <= max_pages:
                print(f"\nüìÑ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –°–¢–†–ê–ù–ò–¶–£ {current_page}/{max_pages}")
                print(f"{'='*50}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                cards = parser.find_resume_cards()
                if not cards:
                    print(f"‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {current_page}")
                    break
                
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {current_page}")
                total_cards_across_pages += len(cards)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                max_cards_per_page = PARSING_CONFIG.get('max_cards_per_page', len(cards))
                total_cards = min(len(cards), max_cards_per_page)
                
                print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {total_cards} –∏–∑ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ (–ª–∏–º–∏—Ç: {max_cards_per_page})")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∞ –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
                for i in range(total_cards):
                    try:
                        print(f"\n{'='*50}")
                        print(f"üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–†–¢–û–ß–ö–£ {i+1}/{total_cards}")
                        print(f"{'='*50}")
                        
                        # –ó–ê–ù–û–í–û –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è stale reference
                        current_cards = parser.find_resume_cards()
                        if not current_cards or i >= len(current_cards):
                            print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                            failed_count += 1
                            continue
                        
                        current_card = current_cards[i]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        card_info = parser.parse_card_info(current_card)
                        if not card_info:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                            failed_count += 1
                            continue
                        
                        print(f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞: {card_info['title']}")
                        print(f"üë§ –ò–º—è: {card_info['name']}")
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ
                        if parser.click_card(current_card):
                            print(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ {i+1}")
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é LLM
                            details = parser.parse_resume_with_llm()
                            
                            if details:
                                full_data = {
                                    'card_number': i+1,
                                    'card_info': card_info,
                                    'detailed_info': details
                                }
                                processed_resumes.append(full_data)
                                successful_count += 1
                                
                                print(f"‚úÖ –†–µ–∑—é–º–µ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
                                print(f"   –î–µ—Ç–∞–ª–∏: {details['full_name']}")
                                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–≤—ã–∫–∞–º
                                prof_skills = details.get('professional_skills', [])
                                if prof_skills and len(prof_skills) > 0:
                                    print(f"   –ù–∞–≤—ã–∫–∏: {prof_skills[0]}")
                                else:
                                    print(f"   –ù–∞–≤—ã–∫–∏: –ù–µ—Ç")
                            else:
                                failed_count += 1
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                            if parser.go_back():
                                print(f"‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫")
                                time.sleep(1.5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞
                            else:
                                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º")
                                break
                                
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É {i+1}")
                            failed_count += 1
                            
                        progress = ((i+1) / total_cards) * 100
                        print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                        failed_count += 1
                
                # –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ó–ê–í–ï–†–®–ï–ù–ê
                total_pages_processed += 1
                print(f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!")
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_count}")
                print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed_count}")
                print(f"   üìã –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {total_cards}")
                
                # –ü–ï–†–ï–•–û–î –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –°–¢–†–ê–ù–ò–¶–£
                if pagination_enabled and current_page < max_pages:
                    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                    
                    if parser.has_next_page():
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                        if parser.go_to_next_page():
                            current_page += 1
                            print(f"üìÑ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {current_page}")
                            time.sleep(PARSING_CONFIG.get('delay_between_pages', 2))
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                            break
                    else:
                        print(f"üèÅ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü")
                        break
                else:
                    if not pagination_enabled:
                        print(f"‚èπÔ∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    else:
                        print(f"üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({max_pages})")
                    break
            
            # –ò–¢–û–ì–ò –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –°–¢–†–ê–ù–ò–¶
            print(f"\n{'='*50}")
            print(f"üìä –ò–¢–û–ì–ò –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô")
            print(f"{'='*50}")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages_processed}")
            print(f"üìã –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_cards_across_pages}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_count}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
            if total_cards_across_pages > 0:
                print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_count/total_cards_across_pages)*100:.1f}%")
            print(f"üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–∑—é–º–µ: {len(processed_resumes)}")
            print(f"{'='*50}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
            if processed_resumes:
                output_filename = f"work_ua_resumes_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                with open(output_filename, 'w', encoding='utf-8') as f:
                    json.dump(processed_resumes, f, ensure_ascii=False, indent=2)
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_filename}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            
        parser.close_driver()
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä") 