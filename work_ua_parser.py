"""
Work.ua Resume Parser
–ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—é–º–µ —Å —Å–∞–π—Ç–∞ work.ua
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, StaleElementReferenceException
from webdriver_manager.chrome import ChromeDriverManager
import time
import json
import csv
import logging
import datetime
import openai
from config import BROWSER_CONFIG


class WorkUaParser:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.driver = None
        self.base_url = "https://www.work.ua/resumes-%D0%B1%D1%83%D1%85%D0%B3%D0%B0%D0%BB%D1%82%D0%B5%D1%80/"
        self.setup_logging()
        self.max_retries = 3
        self.retry_delay = 2
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_filename = f"work_ua_parser_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_filename, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info("Work.ua Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def retry_operation(self, operation, operation_name, max_retries=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        if max_retries is None:
            max_retries = self.max_retries
            
        for attempt in range(max_retries + 1):
            try:
                result = operation()
                if attempt > 0:
                    self.logger.info(f"‚úÖ {operation_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                return result
            except Exception as e:
                if attempt < max_retries:
                    self.logger.warning(f"‚ö†Ô∏è {operation_name} –Ω–µ—É–¥–∞—á–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1}): {e}")
                    time.sleep(self.retry_delay)
                else:
                    self.logger.error(f"‚ùå {operation_name} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ {max_retries + 1} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    raise e
        
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        def _setup():
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
            chrome_options = Options()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            chrome_options.add_argument(f"--window-size={BROWSER_CONFIG['window_size'][0]},{BROWSER_CONFIG['window_size'][1]}")
            
            # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω headless —Ä–µ–∂–∏–º
            if BROWSER_CONFIG['headless']:
                chrome_options.add_argument("--headless")
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-web-security")
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è Chrome –¥—Ä–∞–π–≤–µ—Ä–∞
                service = Service(ChromeDriverManager().install())
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
                self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                self.driver.implicitly_wait(BROWSER_CONFIG['implicit_wait'])
                
                self.logger.info("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
                raise e
        
        try:
            return self.retry_operation(_setup, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞")
        except Exception as e:
            self.logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
        
    def open_page(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—é–º–µ"""
        if not self.driver:
            self.logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        def _open():
            self.logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.base_url}")
            
            try:
                self.driver.get(self.base_url)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å WebDriverWait
                wait = WebDriverWait(self.driver, 10)
                wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                current_url = self.driver.current_url
                page_title = self.driver.title
                
                self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
                self.logger.info(f"   URL: {current_url}")
                self.logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if "work.ua" in current_url and ("—Ä–µ–∑—é–º–µ" in page_title.lower() or "resume" in current_url):
                    self.logger.info("‚úÖ –ú—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ work.ua")
                    return True
                else:
                    self.logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –º—ã –Ω–µ –Ω–∞ —Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    return False
                    
            except TimeoutException:
                self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                raise
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                raise
        
        try:
            return self.retry_operation(_open, "–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        except Exception as e:
            self.logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return False
        
    def find_resume_cards(self):
        """–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
            
        try:
            print("–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from config import SELECTORS
            card_selector = SELECTORS['resume_cards']
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {card_selector}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            time.sleep(3)
            
            # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.driver.find_elements(By.CSS_SELECTOR, card_selector)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ: {len(cards)}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if len(cards) < 5:  # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–∞–ª–æ, –ø—Ä–æ–≤–µ—Ä–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                
                # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                alt_cards1 = self.driver.find_elements(By.CSS_SELECTOR, ".card.resume-link")
                print(f"   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä '.card.resume-link': {len(alt_cards1)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                alt_cards2 = self.driver.find_elements(By.CSS_SELECTOR, "div.card")
                print(f"   –°–µ–ª–µ–∫—Ç–æ—Ä 'div.card': {len(alt_cards2)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–∑—é–º–µ
                container = self.driver.find_elements(By.ID, "pjax-resume-list")
                if container:
                    print(f"   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #pjax-resume-list –Ω–∞–π–¥–µ–Ω")
                    # –ò—â–µ–º –≤—Å–µ div –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    divs_in_container = container[0].find_elements(By.TAG_NAME, "div")
                    print(f"   –í—Å–µ–≥–æ div –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {len(divs_in_container)}")
                else:
                    print("   ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #pjax-resume-list –ù–ï –ù–ê–ô–î–ï–ù")
            
            if len(cards) > 0:
                print("üìã –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫:")
                for i, card in enumerate(cards[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
                        title_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                        title = title_element.text.strip()
                        link = title_element.get_attribute("href")
                        print(f"   {i+1}. {title}")
                        print(f"      –°—Å—ã–ª–∫–∞: {link}")
                    except Exception as e:
                        print(f"   {i+1}. [–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}]")
                        
                return cards
            else:
                print("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return []
        
    def parse_card_info(self, card):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if not card:
            return None
            
        try:
            card_info = {}
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—é–º–µ –∏ —Å—Å—ã–ª–∫–∞
            try:
                title_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                card_info['title'] = title_element.text.strip()
                card_info['link'] = title_element.get_attribute("href")
            except:
                card_info['title'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                card_info['link'] = ""
            
            # –ó–∞—Ä–ø–ª–∞—Ç–∞
            try:
                salary_element = card.find_element(By.CSS_SELECTOR, ".h5.strong-600")
                card_info['salary'] = salary_element.text.strip()
            except:
                card_info['salary'] = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –ò–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ - –∏—â–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            try:
                # –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–ª–æ–≤–µ–∫–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è)
                personal_paragraphs = card.find_elements(By.CSS_SELECTOR, "p.mt-xs.mb-0")
                personal_info_found = False
                
                for p in personal_paragraphs:
                    text = p.text.strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç strong-600 –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–≥—Ä–Ω")
                    if text and "–≥—Ä–Ω" not in text and len(text.split(",")) >= 2:
                        card_info['personal_info'] = text
                        parts = text.split(', ')
                        if len(parts) >= 1:
                            card_info['name'] = parts[0]
                        if len(parts) >= 2:
                            card_info['age_location'] = ', '.join(parts[1:])
                        personal_info_found = True
                        break
                
                if not personal_info_found:
                    card_info['personal_info'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    card_info['name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    card_info['age_location'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    
            except Exception as e:
                card_info['personal_info'] = "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"
                card_info['name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                card_info['age_location'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            try:
                experience_elements = card.find_elements(By.CSS_SELECTOR, "ul.mt-lg.mb-0 li")
                if experience_elements:
                    experience_list = []
                    for exp in experience_elements[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –æ–ø—ã—Ç–∞
                        exp_text = exp.text.strip()
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        if exp_text and exp_text not in ["PRO", "–§–∞–π–ª", ""]:
                            experience_list.append(exp_text)
                    card_info['experience'] = experience_list
                else:
                    card_info['experience'] = []
            except:
                card_info['experience'] = []
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/—Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
            try:
                education_elements = card.find_elements(By.CSS_SELECTOR, "p.mb-0.mt-xs.text-default-7")
                if education_elements:
                    card_info['education_employment'] = education_elements[0].text.strip()
                else:
                    card_info['education_employment'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            except:
                card_info['education_employment'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            return card_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None
        
    def click_card(self, card):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤–Ω—É—Ç—Ä—å –∫–∞—Ä—Ç–æ—á–∫–∏"""
        if not card or not self.driver:
            self.logger.error("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–ª–∏ –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
            
        def _click():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞
                self.driver.current_url  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
                
                # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                link_element = card.find_element(By.CSS_SELECTOR, "h2 a")
                link_url = link_element.get_attribute("href")
                title = link_element.text.strip()
                
                self.logger.info(f"üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ: '{title}'")
                self.logger.info(f"   URL: {link_url}")
                
                # –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
                link_element.click()
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å timeout
                wait = WebDriverWait(self.driver, 15)
                wait.until(lambda driver: "/resumes/" in driver.current_url)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ
                current_url = self.driver.current_url
                if "/resumes/" in current_url and current_url != self.base_url:
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ")
                    self.logger.info(f"   –¢–µ–∫—É—â–∏–π URL: {current_url}")
                    return True
                else:
                    self.logger.warning("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è")
                    self.logger.warning(f"   –¢–µ–∫—É—â–∏–π URL: {current_url}")
                    return False
                    
            except TimeoutException:
                self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
                raise
            except StaleElementReferenceException:
                self.logger.error("‚ùå Stale element –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ")
                raise
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ: {e}")
                raise
        
        try:
            return self.retry_operation(_click, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ä—Ç–æ—á–∫—É", max_retries=2)
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫: {e}")
            return False

    def go_back(self):
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        if not self.driver:
            self.logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        def _go_back():
            try:
                self.logger.info("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
                current_url_before = self.driver.current_url
                self.logger.info(f"URL –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞: {current_url_before}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ —Å –∫–æ—Ä–æ—Ç–∫–∏–º timeout
                self.driver.set_page_load_timeout(10)  # –£–º–µ–Ω—å—à–∞–µ–º timeout –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                self.driver.back()
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å WebDriverWait
                wait = WebDriverWait(self.driver, 10)
                wait.until(lambda driver: driver.current_url != current_url_before)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å
                current_url_after = self.driver.current_url
                self.logger.info(f"URL –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: {current_url_after}")
                
                if current_url_after != current_url_before:
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π timeout
                    self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                    return True
                else:
                    self.logger.warning("‚ö†Ô∏è URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è")
                    return False
                    
            except TimeoutException:
                self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                try:
                    self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                except:
                    pass
                raise
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥: {e}")
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ  
                try:
                    self.driver.set_page_load_timeout(BROWSER_CONFIG['page_load_timeout'])
                except:
                    pass
                raise
        
        try:
            return self.retry_operation(_go_back, "–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥", max_retries=2)
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –µ—â–µ –¥—Ä–∞–π–≤–µ—Ä
            try:
                self.driver.current_url
                self.logger.info("–î—Ä–∞–π–≤–µ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except:
                self.logger.critical("‚ùå –î—Ä–∞–π–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            return False
            
    def check_driver_alive(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            if self.driver:
                self.driver.current_url
                return True
            return False
        except Exception as e:
            self.logger.error(f"–î—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
            return False

    def parse_resume_details(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—é–º–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ
            current_url = self.driver.current_url
            if "/resumes/" not in current_url:
                print("‚ö†Ô∏è –ú—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ")
                return None
            
            print("üìã –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—é–º–µ...")
            
            resume_details = {}
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—é–º–µ (–¥–æ–ª–∂–Ω–æ—Å—Ç—å)
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–µ–∑—é–º–µ
                title_selectors = ["h1.card-title", "h1", ".resume-header h1", ".card-header h1"]
                title_found = False
                
                for selector in title_selectors:
                    try:
                        title_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                        title_text = title_element.text.strip()
                        if title_text and len(title_text) > 3:
                            resume_details['full_title'] = title_text
                            title_found = True
                            break
                    except:
                        continue
                
                if not title_found:
                    resume_details['full_title'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            except:
                resume_details['full_title'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ü–æ–ª–Ω–æ–µ –∏–º—è - –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            try:
                name_found = False
                
                # –ò—â–µ–º –∏–º—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∞—Ö
                name_selectors = [".card-body .strong-600", ".personal-info .name", "h2.name", ".candidate-name"]
                
                for selector in name_selectors:
                    try:
                        name_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for name_elem in name_elements:
                            name_text = name_elem.text.strip()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º—è (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–≥—Ä–Ω", —Ü–∏—Ñ—Ä—ã –≤ –±–æ–ª—å—à–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö)
                            if name_text and "–≥—Ä–Ω" not in name_text and len(name_text.split()) <= 3:
                                resume_details['full_name'] = name_text
                                name_found = True
                                break
                        if name_found:
                            break
                    except:
                        continue
                
                if not name_found:
                    resume_details['full_name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            except:
                resume_details['full_name'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            try:
                salary_selectors = [".salary-value", ".salary", ".expected-salary", "span:contains('–≥—Ä–Ω')", ".strong-600"]
                salary_found = False
                
                for selector in salary_selectors:
                    try:
                        salary_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for sal_elem in salary_elements:
                            sal_text = sal_elem.text.strip()
                            if "–≥—Ä–Ω" in sal_text:
                                resume_details['expected_salary'] = sal_text
                                salary_found = True
                                break
                        if salary_found:
                            break
                    except:
                        continue
                
                if not salary_found:
                    resume_details['expected_salary'] = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            except:
                resume_details['expected_salary'] = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            try:
                experience_list = []
                
                # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã
                experience_selectors = [
                    ".work-experience li",
                    ".experience .card-body ul li", 
                    ".experience-item",
                    "ul.list-unstyled li",
                    ".timeline-item"
                ]
                
                for selector in experience_selectors:
                    try:
                        exp_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for exp in exp_elements[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
                            exp_text = exp.text.strip()
                            # –§–∏–ª—å—Ç—Ä—É–µ–º: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ
                            if (exp_text and len(exp_text) > 20 and 
                                any(word in exp_text.lower() for word in ["–±—É—Ö–≥–∞–ª—Ç–µ—Ä", "—Ä–æ–±–æ—Ç–∞", "–¥–æ—Å–≤—ñ–¥", "–∫–æ–º–ø–∞–Ω—ñ—è", "—Ä—ñ–∫", "–º—ñ—Å—è—Ü—å"])):
                                experience_list.append(exp_text)
                        
                        if experience_list:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–ø—ã—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                            break
                    except:
                        continue
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∞—Ö, –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                if not experience_list:
                    try:
                        all_paragraphs = self.driver.find_elements(By.CSS_SELECTOR, "p, div")
                        for p in all_paragraphs:
                            p_text = p.text.strip()
                            if (len(p_text) > 30 and len(p_text) < 200 and
                                any(word in p_text.lower() for word in ["–¥–æ—Å–≤—ñ–¥", "–ø—Ä–∞—Ü—é–≤–∞–≤", "—Ä–æ–±–æ—Ç–∞", "–∫–æ–º–ø–∞–Ω—ñ—è"])):
                                experience_list.append(p_text)
                                if len(experience_list) >= 3:
                                    break
                    except:
                        pass
                
                resume_details['detailed_experience'] = experience_list
            except:
                resume_details['detailed_experience'] = []
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            try:
                education_info = []
                
                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
                all_text = self.driver.find_element(By.TAG_NAME, "body").text.lower()
                education_keywords = ["–æ—Å–≤—ñ—Ç–∞", "—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "—ñ–Ω—Å—Ç–∏—Ç—É—Ç", "–∫–æ–ª–µ–¥–∂", "—Ç–µ—Ö–Ω—ñ–∫—É–º", "–¥–∏–ø–ª–æ–º"]
                
                # –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
                all_paragraphs = self.driver.find_elements(By.CSS_SELECTOR, "p, div, li")
                for p in all_paragraphs:
                    p_text = p.text.strip()
                    if (p_text and len(p_text) > 10 and len(p_text) < 150 and
                        any(keyword in p_text.lower() for keyword in education_keywords)):
                        education_info.append(p_text)
                        if len(education_info) >= 2:
                            break
                
                if not education_info:
                    # –û–±—â–∏–π –ø–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                    found_keywords = [kw for kw in education_keywords if kw in all_text]
                    if found_keywords:
                        education_info = [f"–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {', '.join(found_keywords)}"]
                    else:
                        education_info = ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"]
                
                resume_details['education'] = education_info
            except:
                resume_details['education'] = ["–ù–µ —É–∫–∞–∑–∞–Ω–æ"]
            
            # –ù–∞–≤—ã–∫–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            try:
                skills_list = []
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                full_text = self.driver.find_element(By.TAG_NAME, "body").text.lower()
                accounting_keywords = [
                    "1c", "excel", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è", "–∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å", "–ø–æ–¥–∞—Ç–∫–∏", "–±–∞–ª–∞–Ω—Å", 
                    "–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–æ–±–ª—ñ–∫", "–∞—É–¥–∏—Ç", "–∫–∞—Å—Å–∞", "–±–∞–Ω–∫",
                    "–ø–¥–≤", "—Ñ—ñ–Ω–∞–Ω—Å–∏", "–µ–∫–æ–Ω–æ–º—ñ–∫–∞", "–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è"
                ]
                
                found_skills = []
                for keyword in accounting_keywords:
                    if keyword in full_text:
                        found_skills.append(keyword)
                
                if found_skills:
                    skills_list = [f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(found_skills[:8])}"]  # –ü–µ—Ä–≤—ã–µ 8
                else:
                    skills_list = ["–ù–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ"]
                
                resume_details['skills'] = skills_list
            except:
                resume_details['skills'] = ["–ù–µ —É–∫–∞–∑–∞–Ω—ã"]
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∏—â–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
            try:
                resume_details['contact_info'] = ["–°–∫—Ä—ã—Ç–æ –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"]
            except:
                resume_details['contact_info'] = ["–°–∫—Ä—ã—Ç–æ"]
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∏—â–µ–º –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥, —Å—Ç–∞—Ç—É—Å
            try:
                additional_info = []
                
                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                info_elements = self.driver.find_elements(By.CSS_SELECTOR, "p, span, div")
                for info in info_elements:
                    info_text = info.text.strip()
                    # –ò—â–µ–º –ø–æ–ª–µ–∑–Ω—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if (info_text and len(info_text) < 50 and
                        any(word in info_text.lower() for word in ["—Ä—ñ–∫", "—Ä–æ–∫—ñ–≤", "–º—ñ—Å—Ç–æ", "–∫–∏—ó–≤", "—Ö–∞—Ä–∫—ñ–≤", "–æ–¥–µ—Å–∞", "–¥–Ω—ñ–ø—Ä–æ"])):
                        additional_info.append(info_text)
                        if len(additional_info) >= 3:
                            break
                
                resume_details['additional_info'] = additional_info if additional_info else ["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
            except:
                resume_details['additional_info'] = ["–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"]
            
            # URL —Ä–µ–∑—é–º–µ
            resume_details['resume_url'] = current_url
            
            print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞")
            return resume_details
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None

    def parse_resume_with_llm(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é LLM"""
        if not self.driver:
            self.logger.error("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ
            current_url = self.driver.current_url
            if "/resumes/" not in current_url:
                self.logger.warning("‚ö†Ô∏è –ú—ã –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ")
                return None
            
            self.logger.info("ü§ñ –ò–∑–≤–ª–µ–∫–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_html = self.driver.page_source
            
            # –û—á–∏—â–∞–µ–º HTML –æ—Ç –ª–∏—à–Ω–µ–≥–æ (—Å–∫—Ä–∏–ø—Ç—ã, —Å—Ç–∏–ª–∏)
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(page_html, 'html.parser')
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for element in soup(['script', 'style', 'nav', 'header', 'footer']):
                element.decompose()
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            main_content = soup.get_text(separator=' ', strip=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ (ChatGPT –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
            if len(main_content) > 8000:
                main_content = main_content[:8000] + "..."
            
            self.logger.info(f"üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(main_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è ChatGPT
            prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—é–º–µ —Å —Å–∞–π—Ç–∞ work.ua –∏ –∏–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:
{main_content}

–í–µ—Ä–Ω–∏ JSON —Å —Ç–∞–∫–∏–º–∏ –ø–æ–ª—è–º–∏:
{{
    "full_name": "–ø–æ–ª–Ω–æ–µ –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
    "position": "–∂–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å", 
    "salary": "–∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è",
    "age": "–≤–æ–∑—Ä–∞—Å—Ç",
    "location": "–≥–æ—Ä–æ–¥/–ª–æ–∫–∞—Ü–∏—è",
    "education": ["–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è"],
    "experience": ["–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã"],
    "skills": ["–Ω–∞–≤—ã–∫–∏", "–∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"],
    "additional_info": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}}

–ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–∫–∞–∂–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ".
–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
            self.logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI...")
            
            try:
                client = openai.OpenAI()
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ–∑—é–º–µ. –ò–∑–≤–ª–µ–∫–∞–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=1000,
                    temperature=0.1
                )
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                llm_response = response.choices[0].message.content.strip()
                self.logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏
                if llm_response.startswith('```json'):
                    llm_response = llm_response[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                if llm_response.startswith('```'):
                    llm_response = llm_response[3:]   # –£–±–∏—Ä–∞–µ–º ```
                if llm_response.endswith('```'):
                    llm_response = llm_response[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                llm_response = llm_response.strip()
                
                # –ü–∞—Ä—Å–∏–º JSON
                try:
                    resume_data = json.loads(llm_response)
                    resume_data['resume_url'] = current_url
                    resume_data['parsed_with'] = 'OpenAI GPT-3.5'
                    
                    self.logger.info("üéâ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é LLM")
                    return resume_data
                    
                except json.JSONDecodeError:
                    self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI")
                    self.logger.error(f"–û—Ç–≤–µ—Ç: {llm_response}")
                    return None
                    
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ parse_resume_with_llm: {e}")
            return None

    def process_all_cards(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if not self.driver:
            print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return []
            
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫...")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.find_resume_cards()
            if not cards:
                print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            total_cards = len(cards)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            processed_resumes = []
            successful_count = 0
            failed_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∏–∑–±–µ–≥–∞–µ–º stale reference)
            for i in range(total_cards):
                try:
                    print(f"\n{'='*60}")
                    print(f"üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–†–¢–û–ß–ö–£ {i+1}/{total_cards}")
                    print(f"{'='*60}")
                    
                    # –ó–ê–ù–û–í–û –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è stale reference
                    current_cards = self.find_resume_cards()
                    if not current_cards or i >= len(current_cards):
                        print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                        failed_count += 1
                        continue
                    
                    current_card = current_cards[i]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–∞—Ä—Ç–æ—á–∫–∏
                    card_info = self.parse_card_info(current_card)
                    if not card_info:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                        failed_count += 1
                        continue
                    
                    print(f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞: {card_info['title']}")
                    print(f"üë§ –ò–º—è: {card_info['name']}")
                    print(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {card_info['salary']}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ
                    if self.click_card(current_card):
                        print(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ {i+1}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é LLM
                        details = self.parse_resume_with_llm()
                        
                        if details:
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            full_resume_data = {
                                'card_number': i+1,
                                'card_info': card_info,
                                'detailed_info': details,
                                'processing_status': 'success'
                            }
                            
                            processed_resumes.append(full_resume_data)
                            successful_count += 1
                            
                            print(f"‚úÖ –†–µ–∑—é–º–µ {i+1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                            print(f"   –ü–æ–ª–Ω–æ–µ –∏–º—è: {details['full_name']}")
                            print(f"   –ù–∞–≤—ã–∫–∏: {', '.join(details['skills'][:1])}")
                            print(f"   –û–ø—ã—Ç: {len(details['detailed_experience'])} –∑–∞–ø–∏—Å–µ–π")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—é–º–µ {i+1}")
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            partial_data = {
                                'card_number': i+1,
                                'card_info': card_info,
                                'detailed_info': None,
                                'processing_status': 'partial'
                            }
                            processed_resumes.append(partial_data)
                            failed_count += 1
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                        if self.go_back():
                            print(f"‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                            time.sleep(1.5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è
                            
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É {i+1}")
                        failed_count += 1
                        continue
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    progress = ((i+1) / total_cards) * 100
                    print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({i+1}/{total_cards})")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–∞—Ä—Ç–æ—á–µ–∫
                    if i < total_cards - 1:
                        time.sleep(0.5)
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}: {e}")
                    failed_count += 1
                    continue
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\n{'='*60}")
            print(f"üìä –ò–¢–û–ì–ò –ú–ê–°–°–û–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
            print(f"{'='*60}")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_count}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
            print(f"üìã –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total_cards}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_count/total_cards)*100:.1f}%")
            print(f"{'='*60}")
            
            return processed_resumes
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return []

    def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.driver:
                self.logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –¥—Ä–∞–π–≤–µ—Ä
                try:
                    self.driver.current_url
                    self.driver.quit()
                    self.logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    self.logger.warning(f"–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–ª, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: {e}")
                    try:
                        self.driver.quit()
                    except:
                        pass
                
                self.driver = None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        finally:
            self.driver = None


if __name__ == "__main__":
    parser = WorkUaParser()
    print("Work.ua Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫ (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è - –ø–µ—Ä–≤—ã–µ 3)
    if parser.setup_driver():
        print("–î—Ä–∞–π–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        if parser.open_page():
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = parser.find_resume_cards()
            if cards:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                print(f"\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ú–ê–°–°–û–í–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ (–ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ä—Ç–æ—á–∫–∏):")
                print("üìù –î–ª—è –¥–µ–º–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∫–∞—Ä—Ç–æ—á–µ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ç–µ—Å—Ç")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ process_all_cards
                processed_resumes = []
                successful_count = 0
                failed_count = 0
                total_cards = min(3, len(cards))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∞ –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
                for i in range(total_cards):
                    try:
                        print(f"\n{'='*50}")
                        print(f"üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–†–¢–û–ß–ö–£ {i+1}/{total_cards}")
                        print(f"{'='*50}")
                        
                        # –ó–ê–ù–û–í–û –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è stale reference
                        current_cards = parser.find_resume_cards()
                        if not current_cards or i >= len(current_cards):
                            print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                            failed_count += 1
                            continue
                        
                        current_card = current_cards[i]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        card_info = parser.parse_card_info(current_card)
                        if not card_info:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
                            failed_count += 1
                            continue
                        
                        print(f"üìã –ö–∞—Ä—Ç–æ—á–∫–∞: {card_info['title']}")
                        print(f"üë§ –ò–º—è: {card_info['name']}")
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ
                        if parser.click_card(current_card):
                            print(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ {i+1}")
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é LLM
                            details = parser.parse_resume_with_llm()
                            
                            if details:
                                full_data = {
                                    'card_number': i+1,
                                    'card_info': card_info,
                                    'detailed_info': details
                                }
                                processed_resumes.append(full_data)
                                successful_count += 1
                                
                                print(f"‚úÖ –†–µ–∑—é–º–µ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
                                print(f"   –î–µ—Ç–∞–ª–∏: {details['full_name']}")
                                print(f"   –ù–∞–≤—ã–∫–∏: {details['skills'][0] if details['skills'] else '–ù–µ—Ç'}")
                            else:
                                failed_count += 1
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                            if parser.go_back():
                                print(f"‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫")
                                time.sleep(1.5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞
                            else:
                                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º")
                                break
                                
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É {i+1}")
                            failed_count += 1
                            
                        progress = ((i+1) / total_cards) * 100
                        print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                        failed_count += 1
                
                # –ò—Ç–æ–≥–∏ –¥–µ–º–æ-—Ç–µ—Å—Ç–∞
                print(f"\n{'='*50}")
                print(f"üìä –ò–¢–û–ì–ò –î–ï–ú–û-–¢–ï–°–¢–ê")
                print(f"{'='*50}")
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_count}")
                print(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
                print(f"üìã –í—Å–µ–≥–æ: {total_cards}")
                print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_count/total_cards)*100:.1f}%")
                print(f"üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–∑—é–º–µ: {len(processed_resumes)}")
                print(f"{'='*50}")
                
            else:
                print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            
        parser.close_driver()
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä") 