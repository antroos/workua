"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–≤ Work.ua Parser
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –æ—Ç–¥–µ–ª—å–Ω–æ
"""

from work_ua_parser import WorkUaParser
import time

def test_increment_2_driver_setup():
    """–¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –ò–ù–ö–†–ï–ú–ï–ù–¢–ê 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver")
    print("="*60)
    
    parser = WorkUaParser()
    
    if parser.setup_driver():
        print("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        parser.close_driver()
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞")
        return False

def test_increment_3_page_opening():
    """–¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ 3: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –ò–ù–ö–†–ï–ú–ï–ù–¢–ê 3: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã work.ua")
    print("="*60)
    
    parser = WorkUaParser()
    
    if parser.setup_driver():
        if parser.open_page():
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            parser.close_driver()
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            parser.close_driver()
            return False
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞")
        return False

def test_increment_4_cards_detection():
    """–¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ 4: –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –ò–ù–ö–†–ï–ú–ï–ù–¢–ê 4: –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ")
    print("="*60)
    
    parser = WorkUaParser()
    
    if parser.setup_driver() and parser.open_page():
        cards = parser.find_resume_cards()
        if cards and len(cards) > 0:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            print("üìã –ü–µ—Ä–≤—ã–µ 3 –∫–∞—Ä—Ç–æ—á–∫–∏:")
            for i in range(min(3, len(cards))):
                try:
                    title_elem = cards[i].find_element("css selector", "h2 a")
                    print(f"   {i+1}. {title_elem.text.strip()}")
                except:
                    print(f"   {i+1}. [–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫]")
            parser.close_driver()
            return True
        else:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            parser.close_driver()
            return False
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return False

def test_increment_5_card_parsing():
    """–¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ 5: –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –ò–ù–ö–†–ï–ú–ï–ù–¢–ê 5: –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏")
    print("="*60)
    
    parser = WorkUaParser()
    
    if parser.setup_driver() and parser.open_page():
        cards = parser.find_resume_cards()
        if cards and len(cards) > 0:
            card_info = parser.parse_card_info(cards[0])
            if card_info:
                print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∞:")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {card_info['title']}")
                print(f"   –ò–º—è: {card_info['name']}")
                print(f"   –ó–∞—Ä–ø–ª–∞—Ç–∞: {card_info['salary']}")
                print(f"   –°—Å—ã–ª–∫–∞: {card_info['link']}")
                parser.close_driver()
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏")
                parser.close_driver()
                return False
        else:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            parser.close_driver()
            return False
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False

def test_increment_6_7_navigation():
    """–¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–≤ 6-7: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –≤–æ–∑–≤—Ä–∞—Ç"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –ò–ù–ö–†–ï–ú–ï–ù–¢–û–í 6-7: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –≤–æ–∑–≤—Ä–∞—Ç")
    print("="*60)
    
    parser = WorkUaParser()
    
    if parser.setup_driver() and parser.open_page():
        cards = parser.find_resume_cards()
        if cards and len(cards) > 0:
            print("üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É...")
            if parser.click_card(cards[0]):
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ")
                time.sleep(2)
                
                if parser.go_back():
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
                    parser.close_driver()
                    return True
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
                    parser.close_driver()
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
                parser.close_driver()
                return False
        else:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            parser.close_driver()
            return False
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False

def test_increment_8_detailed_parsing():
    """–¢–µ—Å—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ 8: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –ò–ù–ö–†–ï–ú–ï–ù–¢–ê 8: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ")
    print("="*60)
    
    parser = WorkUaParser()
    
    if parser.setup_driver() and parser.open_page():
        cards = parser.find_resume_cards()
        if cards and len(cards) > 0:
            if parser.click_card(cards[0]):
                details = parser.parse_resume_details()
                if details:
                    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞:")
                    print(f"   –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {details['full_title']}")
                    print(f"   –ü–æ–ª–Ω–æ–µ –∏–º—è: {details['full_name']}")
                    print(f"   –ù–∞–≤—ã–∫–∏: {details['skills'][:1]}")
                    print(f"   –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {details['education'][:1]}")
                    
                    parser.go_back()
                    parser.close_driver()
                    return True
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                    parser.close_driver()
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É")
                parser.close_driver()
                return False
        else:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            parser.close_driver()
            return False
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–ù–ö–†–ï–ú–ï–ù–¢–û–í")
    print("‚è±Ô∏è –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –∑–∞–π–º–µ—Ç 10-15 —Å–µ–∫—É–Ω–¥")
    
    tests = [
        ("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç 2", test_increment_2_driver_setup),
        ("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç 3", test_increment_3_page_opening),
        ("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç 4", test_increment_4_cards_detection),
        ("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç 5", test_increment_5_card_parsing),
        ("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã 6-7", test_increment_6_7_navigation),
        ("–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç 8", test_increment_8_detailed_parsing),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    passed = 0
    total = len(tests)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print("="*60)
    print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ ({(passed/total)*100:.1f}%)")
    
    if passed == total:
        print("üéâ –í–°–ï –ò–ù–ö–†–ï–ú–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!")
    elif passed >= total * 0.8:
        print("üëç –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ò–ù–ö–†–ï–ú–ï–ù–¢–û–í –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ò–ù–ö–†–ï–ú–ï–ù–¢–´ –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
    
    print("="*60)

if __name__ == "__main__":
    main() 