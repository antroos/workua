#!/usr/bin/env python3
"""
–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä Work.ua v2 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï STALE ELEMENTS
–≠—Ç–∞–ø 1.5: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ + –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
"""

import time
import json
from work_ua_parser import WorkUaParser
from config import PARSING_CONFIG, BROWSER_CONFIG

class RobustWorkUaParserV2:
    def __init__(self):
        self.parser = WorkUaParser()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        self.processed_urls = set()  # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URL
        self.session_stats = {
            'total_processed': 0,
            'duplicates_skipped': 0,
            'errors': 0,
            'pages_processed': 0,
            'stale_element_recoveries': 0
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.all_resumes = []
        
    def is_already_processed(self, resume_url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"""
        return resume_url in self.processed_urls
    
    def mark_as_processed(self, resume_url):
        """–û—Ç–º–µ—á–∞–µ–º URL –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        self.processed_urls.add(resume_url)
        
    def get_unique_urls_on_page(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ URL —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ë–ï–ó —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM)"""
        all_cards = self.parser.find_resume_cards()
        if not all_cards:
            return []
        
        unique_urls = []
        for card in all_cards:
            card_info = self.parser.parse_card_info(card)
            if not card_info or not card_info.get('link'):
                continue
                
            resume_url = card_info['link']
            
            if not self.is_already_processed(resume_url):
                unique_urls.append({
                    'resume_url': resume_url,
                    'card_info': card_info
                })
            else:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                self.session_stats['duplicates_skipped'] += 1
        
        print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(unique_urls)} –∏–∑ {len(all_cards)}")
        return unique_urls
    
    def find_card_by_url(self, target_url, max_attempts=3):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ URL (—Ä–µ—à–µ–Ω–∏–µ stale elements)"""
        
        for attempt in range(max_attempts):
            try:
                # –ó–∞–Ω–æ–≤–æ –∏—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                current_cards = self.parser.find_resume_cards()
                
                for card in current_cards:
                    card_info = self.parser.parse_card_info(card)
                    if card_info and card_info.get('link') == target_url:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è URL: {target_url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                        return card
                
                print(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}")
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                time.sleep(1)
        
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è URL: {target_url}")
        return None
    
    def robust_pagination_test_v2(self, max_pages=3, max_cards_per_page=3):
        """–¢–µ—Å—Ç v2 —Å —Ä–µ—à–µ–Ω–∏–µ–º stale elements"""
        
        print("üöÄ –£–°–¢–û–ô–ß–ò–í–´–ô –ü–ê–†–°–ï–† V2 - –≠–¢–ê–ü 1.5: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï STALE ELEMENTS")
        print("=" * 80)
        print(f"–¶–µ–ª—å: {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, –º–∞–∫—Å {max_cards_per_page} —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        print("=" * 80)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not self.parser.setup_driver():
                print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
            if not self.parser.open_page():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                return False
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            for page_num in range(1, max_pages + 1):
                print(f"\nüìÑ –°–¢–†–ê–ù–ò–¶–ê {page_num}")
                print("-" * 50)
                
                success = self._process_page_with_dynamic_elements(page_num, max_cards_per_page)
                
                if not success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                    break
                
                self.session_stats['pages_processed'] += 1
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if page_num < max_pages:
                    if not self._safe_next_page_transition(page_num):
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}")
                        break
            
            # –ò—Ç–æ–≥–∏
            self._print_session_results()
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            self.parser.close_driver()
    
    def _process_page_with_dynamic_elements(self, page_num, max_cards):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL (–ù–ï —ç–ª–µ–º–µ–Ω—Ç—ã!)
        unique_urls = self.get_unique_urls_on_page()
        
        if not unique_urls:
            print(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        urls_to_process = unique_urls[:max_cards]
        
        print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(urls_to_process)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL")
        
        for i, url_data in enumerate(urls_to_process):
            resume_url = url_data['resume_url']
            original_card_info = url_data['card_info']
            
            print(f"\nüìã URL {i+1}/{len(urls_to_process)}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {original_card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   –ö–∞–Ω–¥–∏–¥–∞—Ç: {original_card_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   URL: {resume_url}")
            
            try:
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π –î–û –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                self.mark_as_processed(resume_url)
                
                # üî• –ö–õ–Æ–ß–ï–í–û–ï –û–¢–õ–ò–ß–ò–ï: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                card_element = self.find_card_by_url(resume_url)
                
                if not card_element:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏")
                    self.session_stats['errors'] += 1
                    continue
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∑—é–º–µ
                if self.parser.click_card(card_element):
                    print("‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∑—é–º–µ")
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                    time.sleep(1)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    resume_data = {
                        'url': resume_url,
                        'card_info': original_card_info,
                        'processed_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                        'page_number': page_num,
                        'status': 'success'
                    }
                    
                    self.all_resumes.append(resume_data)
                    self.session_stats['total_processed'] += 1
                    
                    print("‚úÖ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
                    if self.parser.go_back():
                        print("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
                    else:
                        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º")
                        return False
                        
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∑—é–º–µ")
                    self.session_stats['errors'] += 1
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {e}")
                self.session_stats['errors'] += 1
        
        return True
    
    def _safe_next_page_transition(self, current_page):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        
        print(f"\n‚è≠Ô∏è –ü–ï–†–ï–•–û–î –ù–ê –°–¢–†–ê–ù–ò–¶–£ {current_page + 1}")
        print("-" * 30)
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø–µ—Ä–µ—Ö–æ–¥–∞
        before_url = self.parser.driver.current_url
        before_cards = len(self.parser.find_resume_cards())
        
        print(f"üìä –î–æ –ø–µ—Ä–µ—Ö–æ–¥–∞: {before_cards} –∫–∞—Ä—Ç–æ—á–µ–∫")
        print(f"üîó URL: {before_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if not self.parser.has_next_page():
            print("‚ùå –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º
        if not self.parser.go_to_next_page():
            print("‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        after_url = self.parser.driver.current_url
        after_cards = len(self.parser.find_resume_cards())
        
        print(f"üìä –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞: {after_cards} –∫–∞—Ä—Ç–æ—á–µ–∫")
        print(f"üîó URL: {after_url}")
        
        if after_url == before_url:
            print("‚ö†Ô∏è URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!")
            return False
            
        if after_cards == 0:
            print("‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å!")
            return False
        
        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω")
        return True
    
    def _print_session_results(self):
        """–í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏"""
        
        print(f"\n{'='*80}")
        print(f"üìä –ò–¢–û–ì–ò –£–°–¢–û–ô–ß–ò–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê V2")
        print(f"{'='*80}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['total_processed']} —Ä–µ–∑—é–º–µ")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.session_stats['duplicates_skipped']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.session_stats['errors']}")
        print(f"üîÑ Stale element –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {self.session_stats['stale_element_recoveries']}")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['pages_processed']}")
        print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL —Å–æ–±—Ä–∞–Ω–æ: {len(self.processed_urls)}")
        
        if self.session_stats['total_processed'] > 0:
            success_rate = (self.session_stats['total_processed'] / 
                          (self.session_stats['total_processed'] + self.session_stats['errors'])) * 100
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.all_resumes:
            self._save_results()
    
    def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = f"robust_parsing_v2_results_{timestamp}.json"
        
        data = {
            'session_info': {
                'timestamp': timestamp,
                'version': 'v2_stale_elements_fix',
                'stats': self.session_stats,
                'total_unique_urls': len(self.processed_urls)
            },
            'processed_urls': list(self.processed_urls),
            'resumes': self.all_resumes
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã v2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

def main():
    """–ó–∞–ø—É—Å–∫ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ v2"""
    
    parser = RobustWorkUaParserV2()
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ V2:")
    print(f"   Headless: {BROWSER_CONFIG['headless']}")
    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: 3")
    print(f"   –†–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: 3")
    print(f"   üÜï –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: –í–ö–õ")
    
    success = parser.robust_pagination_test_v2(max_pages=3, max_cards_per_page=3)
    
    if success:
        print(f"\nüéâ –¢–ï–°–¢ V2 –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üí™ –ü—Ä–æ–±–ª–µ–º–∞ Stale Elements —Ä–µ—à–µ–Ω–∞!")
    else:
        print(f"\nüí• –¢–µ—Å—Ç V2 –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã")

if __name__ == "__main__":
    main()