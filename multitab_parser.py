#!/usr/bin/env python3
"""
Multi-Tab –ø–∞—Ä—Å–µ—Ä Work.ua - –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ü–û–î–•–û–î
–≠—Ç–∞–ø 2: –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—é–º–µ –≤ –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö, –ø–∞—Ä—Å–∏–º –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞
"""

import time
import json
from work_ua_parser import WorkUaParser
from config import PARSING_CONFIG, BROWSER_CONFIG

class MultiTabWorkUaParser:
    def __init__(self):
        self.parser = WorkUaParser()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        self.processed_urls = set()
        self.session_stats = {
            'total_processed': 0,
            'duplicates_skipped': 0,
            'errors': 0,
            'pages_processed': 0,
            'tabs_opened': 0,
            'tabs_closed': 0
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.all_resumes = []
        
        # –ì–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
        self.main_tab_handle = None
        
    def is_already_processed(self, resume_url):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"""
        return resume_url in self.processed_urls
    
    def mark_as_processed(self, resume_url):
        """–û—Ç–º–µ—á–∞–µ–º URL –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        self.processed_urls.add(resume_url)
        
    def get_unique_urls_on_page(self):
        """–ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL —Ä–µ–∑—é–º–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        all_cards = self.parser.find_resume_cards()
        if not all_cards:
            return []
        
        unique_urls = []
        for card in all_cards:
            card_info = self.parser.parse_card_info(card)
            if not card_info or not card_info.get('link'):
                continue
                
            resume_url = card_info['link']
            
            if not self.is_already_processed(resume_url):
                unique_urls.append({
                    'resume_url': resume_url,
                    'card_info': card_info
                })
            else:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                self.session_stats['duplicates_skipped'] += 1
        
        print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(unique_urls)} –∏–∑ {len(all_cards)}")
        return unique_urls
    
    def open_resumes_in_tabs(self, resume_urls):
        """–û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—é–º–µ –≤ –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö"""
        
        print(f"üîÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º {len(resume_urls)} —Ä–µ–∑—é–º–µ –≤ –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö...")
        
        opened_tabs = []
        
        for i, url_data in enumerate(resume_urls):
            resume_url = url_data['resume_url']
            card_info = url_data['card_info']
            
            try:
                print(f"   üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É {i+1}: {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–∑—é–º–µ
                self.parser.driver.execute_script(f"window.open('{resume_url}', '_blank');")
                
                opened_tabs.append({
                    'url': resume_url,
                    'card_info': card_info,
                    'index': i
                })
                
                self.session_stats['tabs_opened'] += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –≤–∫–ª–∞–¥–æ–∫
                time.sleep(0.3)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ {i+1}: {e}")
                self.session_stats['errors'] += 1
        
        print(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–æ {len(opened_tabs)} –≤–∫–ª–∞–¥–æ–∫")
        return opened_tabs
    
    def parse_tabs_sequentially(self, opened_tabs, page_num):
        """–ü–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ –≤ –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–µ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ"""
        
        print(f"üìã –ü–∞—Ä—Å–∏–º {len(opened_tabs)} —Ä–µ–∑—é–º–µ –≤ –≤–∫–ª–∞–¥–∫–∞—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –≤–∫–ª–∞–¥–æ–∫
        all_handles = self.parser.driver.window_handles
        main_handle = all_handles[0]  # –ü–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ - –≥–ª–∞–≤–Ω–∞—è
        resume_handles = all_handles[1:]  # –û—Å—Ç–∞–ª—å–Ω—ã–µ - —Ä–µ–∑—é–º–µ
        
        print(f"üîç –í—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {len(all_handles)} (1 –≥–ª–∞–≤–Ω–∞—è + {len(resume_handles)} —Ä–µ–∑—é–º–µ)")
        
        for i, tab_data in enumerate(opened_tabs):
            if i >= len(resume_handles):
                print(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–µ–∑—é–º–µ {i+1}")
                break
                
            resume_url = tab_data['url']
            card_info = tab_data['card_info']
            tab_handle = resume_handles[i]
            
            print(f"\nüìÑ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ {i+1}/{len(opened_tabs)}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   URL: {resume_url}")
            
            try:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–∑—é–º–µ
                self.parser.driver.switch_to.window(tab_handle)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ...")
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                current_url = self.parser.driver.current_url
                if "/resumes/" not in current_url:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π URL: {current_url}")
                    self.session_stats['errors'] += 1
                    continue
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                self.mark_as_processed(resume_url)
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—é–º–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
                print("ü§ñ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ...")
                time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                resume_data = {
                    'url': resume_url,
                    'card_info': card_info,
                    'processed_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                    'page_number': page_num,
                    'tab_index': i,
                    'status': 'success',
                    'method': 'multi_tab'
                }
                
                self.all_resumes.append(resume_data)
                self.session_stats['total_processed'] += 1
                
                print("‚úÖ –†–µ–∑—é–º–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ {i+1}: {e}")
                self.session_stats['errors'] += 1
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        print(f"\n‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É...")
        self.parser.driver.switch_to.window(main_handle)
        self.main_tab_handle = main_handle
        
        return True
    
    def close_resume_tabs(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∑—é–º–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—É—é"""
        
        print("üóÇÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∑—é–º–µ...")
        
        all_handles = self.parser.driver.window_handles
        main_handle = self.main_tab_handle or all_handles[0]
        
        closed_count = 0
        for handle in all_handles:
            if handle != main_handle:
                try:
                    self.parser.driver.switch_to.window(handle)
                    self.parser.driver.close()
                    closed_count += 1
                    self.session_stats['tabs_closed'] += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        self.parser.driver.switch_to.window(main_handle)
        
        print(f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ {closed_count} –≤–∫–ª–∞–¥–æ–∫, –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π")
        return True
    
    def multitab_pagination_test(self, max_pages=3, max_cards_per_page=5):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å multi-tab —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        
        print("üöÄ MULTI-TAB –ü–ê–†–°–ï–† - –≠–¢–ê–ü 2: –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–´–ô –ü–û–î–•–û–î")
        print("=" * 80)
        print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –í—Å–µ —Ä–µ–∑—é–º–µ –≤ –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö ‚Üí –ø–∞—Ä—Å–∏–Ω–≥ ‚Üí –∑–∞–∫—Ä—ã—Ç–∏–µ ‚Üí –ø–∞–≥–∏–Ω–∞—Ü–∏—è")
        print(f"–¶–µ–ª—å: {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, –º–∞–∫—Å {max_cards_per_page} —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        print("=" * 80)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not self.parser.setup_driver():
                print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
            if not self.parser.open_page():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –≥–ª–∞–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            self.main_tab_handle = self.parser.driver.current_window_handle
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            for page_num in range(1, max_pages + 1):
                print(f"\nüìÑ –°–¢–†–ê–ù–ò–¶–ê {page_num}")
                print("-" * 60)
                
                success = self._process_page_multitab(page_num, max_cards_per_page)
                
                if not success:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                    break
                
                self.session_stats['pages_processed'] += 1
                
                # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è)
                if page_num < max_pages:
                    if not self._safe_next_page_transition(page_num):
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}")
                        break
            
            # –ò—Ç–æ–≥–∏
            self._print_session_results()
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
            try:
                self.close_resume_tabs()
            except:
                pass
            self.parser.close_driver()
    
    def _process_page_multitab(self, page_num, max_cards):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å multi-tab –ø–æ–¥—Ö–æ–¥–æ–º"""
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        unique_urls = self.get_unique_urls_on_page()
        
        if not unique_urls:
            print(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
            return True
        
        # 2. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        urls_to_process = unique_urls[:max_cards]
        print(f"üéØ –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {len(urls_to_process)} —Ä–µ–∑—é–º–µ")
        
        # 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—é–º–µ –≤ –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        opened_tabs = self.open_resumes_in_tabs(urls_to_process)
        
        if not opened_tabs:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫–∏")
            return False
        
        # 4. –ü–∞—Ä—Å–∏–º —Ä–µ–∑—é–º–µ –≤ –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–µ
        parsing_success = self.parse_tabs_sequentially(opened_tabs, page_num)
        
        # 5. –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∑—é–º–µ
        self.close_resume_tabs()
        
        print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(opened_tabs)} —Ä–µ–∑—é–º–µ")
        return parsing_success
    
    def _safe_next_page_transition(self, current_page):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        
        print(f"\n‚è≠Ô∏è –ü–ï–†–ï–•–û–î –ù–ê –°–¢–†–ê–ù–ò–¶–£ {current_page + 1}")
        print("-" * 40)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        if self.main_tab_handle:
            self.parser.driver.switch_to.window(self.main_tab_handle)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        before_url = self.parser.driver.current_url
        print(f"üîó –¢–µ–∫—É—â–∏–π URL: {before_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if not self.parser.has_next_page():
            print("‚ùå –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if not self.parser.go_to_next_page():
            print("‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        after_url = self.parser.driver.current_url
        print(f"üîó –ù–æ–≤—ã–π URL: {after_url}")
        
        if after_url == before_url:
            print("‚ö†Ô∏è URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!")
            return False
        
        print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–µ–Ω")
        return True
    
    def _print_session_results(self):
        """–í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏"""
        
        print(f"\n{'='*80}")
        print(f"üìä –ò–¢–û–ì–ò MULTI-TAB –ü–ê–†–°–ò–ù–ì–ê")
        print(f"{'='*80}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['total_processed']} —Ä–µ–∑—é–º–µ")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.session_stats['duplicates_skipped']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.session_stats['errors']}")
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['pages_processed']}")
        print(f"üîÄ –í–∫–ª–∞–¥–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ: {self.session_stats['tabs_opened']}")
        print(f"üóÇÔ∏è –í–∫–ª–∞–¥–æ–∫ –∑–∞–∫—Ä—ã—Ç–æ: {self.session_stats['tabs_closed']}")
        print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL —Å–æ–±—Ä–∞–Ω–æ: {len(self.processed_urls)}")
        
        if self.session_stats['total_processed'] > 0:
            success_rate = (self.session_stats['total_processed'] / 
                          (self.session_stats['total_processed'] + self.session_stats['errors'])) * 100
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê MULTI-TAB:")
        print(f"   üö´ –ù–∏–∫–∞–∫–∏—Ö Stale Elements")
        print(f"   üö´ –ù–∏–∫–∞–∫–∏—Ö PJAX –ø—Ä–æ–±–ª–µ–º")
        print(f"   ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
        print(f"   üéØ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.all_resumes:
            self._save_results()
    
    def _save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = f"multitab_parsing_results_{timestamp}.json"
        
        data = {
            'session_info': {
                'timestamp': timestamp,
                'version': 'multitab_strategy',
                'strategy': 'open_all_in_tabs_then_parse',
                'stats': self.session_stats,
                'total_unique_urls': len(self.processed_urls)
            },
            'processed_urls': list(self.processed_urls),
            'resumes': self.all_resumes
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ Multi-tab —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")

def main():
    """–ó–∞–ø—É—Å–∫ multi-tab –ø–∞—Ä—Å–µ—Ä–∞"""
    
    parser = MultiTabWorkUaParser()
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Multi-Tab:")
    print(f"   Headless: {BROWSER_CONFIG['headless']}")
    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: 3")
    print(f"   –†–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: 5")
    print(f"   üÜï Multi-Tab —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –í–ö–õ")
    print(f"   üéØ –ù–∏–∫–∞–∫–∏—Ö stale elements!")
    
    success = parser.multitab_pagination_test(max_pages=3, max_cards_per_page=5)
    
    if success:
        print(f"\nüéâ MULTI-TAB –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üöÄ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print(f"\nüí• Multi-tab —Ç–µ—Å—Ç –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã")

if __name__ == "__main__":
    main()