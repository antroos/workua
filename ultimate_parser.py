#!/usr/bin/env python3
"""
ULTIMATE Work.ua Parser - –õ–£–ß–®–ï–ï –ò–ó –î–í–£–• –ú–ò–†–û–í
‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä: LLM –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏—è + –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ + fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
‚úÖ Bulletproof –ª–æ–≥–∏–∫–∞: Multi-tab + recovery + checkpoint + –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
‚úÖ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—é–º–µ –≤ —Ç–∞–±–∞—Ö –±–µ–∑ PJAX –ø—Ä–æ–±–ª–µ–º
"""

import time
import json
import logging
import os
import random
from datetime import datetime
from work_ua_parser import WorkUaParser

class UltimateWorkUaParser(WorkUaParser):
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ULTIMATE –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –±–∞–∑–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ"""
        super().__init__()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        
        self.setup_bulletproof_logging()
        
        # Bulletproof —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.driver_restarts = 0
        self.max_driver_restarts = 3
        self.operations_count = 0
        self.consecutive_errors = 0
        self.max_consecutive_errors = 5
        
        # Checkpoint —Å–∏—Å—Ç–µ–º–∞
        self.checkpoint_file = f"ultimate_parsing_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        self.session_state = {
            'current_page': 1,
            'processed_urls': set(),
            'failed_urls': set(),
            'successful_resumes': 0,
            'last_checkpoint': None
        }
        
        # Multi-tab –Ω–∞—Å—Ç—Ä–æ–π–∫–∏  
        self.max_tabs_at_once = 3
        self.batch_size = 2
        self.main_tab_handle = None
        
        # üíæ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
        self.data_file = f"resume_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        self.resume_data = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        
        # Health check –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.health_check_interval = 3  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 –æ–ø–µ—Ä–∞—Ü–∏–∏ (—á–∞—â–µ!)
        self.operations_since_check = 0
        
        # üîÑ Retry –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è 100% –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.max_retries_per_card = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É
        self.failed_cards_retry = []   # –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        self.logger.info("üöÄ ULTIMATE Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä + bulletproof –ª–æ–≥–∏–∫–∞)")
    
    def setup_bulletproof_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω–æ–≥–æ"""
        log_filename = f"ultimate_parsing_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ª–æ–≥–≥–µ—Ä—É
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(funcName)-20s | %(message)s',
            datefmt='%H:%M:%S'
        )
        
        file_handler = logging.FileHandler(log_filename, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        self.logger.addHandler(file_handler)
        self.logger.info(f"üìù Bulletproof –ª–æ–≥–∏: {log_filename}")
    
    def parse_single_card_with_retry(self, card, tab_index):
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        max_attempts = self.max_retries_per_card
        
        for attempt in range(1, max_attempts + 1):
            try:
                self.logger.info(f"üìã ULTIMATE –ø–∞—Ä—Å–∏–Ω–≥: {card['title']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º health –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if not self.auto_health_monitor():
                    self.logger.warning(f"‚ùå Health check –ø—Ä–æ–≤–∞–ª–µ–Ω –¥–ª—è {card['title']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                    if attempt < max_attempts:
                        self.logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        if not self.restart_driver_bulletproof():
                            continue
                        # –ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É
                        self.safe_open_tab(card['url'], card['title'])
                        self.safe_switch_to_tab(1)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                    else:
                        continue
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞!
                resume_details = self.parse_resume_details()
                
                if resume_details:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –¥–µ—Ç–∞–ª–∏
                    full_resume = {**card['full_info'], **resume_details}
                    
                    # üíæ –°–û–•–†–ê–ù–Ø–ï–ú –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!
                    self.save_resume_data(full_resume)
                    
                    self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {full_resume.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                    self.session_state['successful_resumes'] += 1
                    self.session_state['processed_urls'].add(card['url'])
                    
                    # Health check –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    self.auto_health_monitor()
                    return True  # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {card['title']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                    if attempt < max_attempts:
                        continue
                    else:
                        self.session_state['processed_urls'].add(card['url'])
                        return False  # –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏
                        
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {card['title']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                
                if attempt < max_attempts:
                    self.logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏...")
                    if self.restart_driver_bulletproof():
                        # –ü–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É
                        try:
                            self.safe_open_tab(card['url'], card['title'])
                            self.safe_switch_to_tab(1)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                        except:
                            continue
                    continue
                else:
                    self.logger.error(f"üíÄ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {card['title']} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                    self.session_state['failed_urls'].add(card['url'])
                    return False
        
        return False  # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã

    def save_resume_data(self, resume_data):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            self.resume_data.append(resume_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.resume_data, f, indent=2, ensure_ascii=False)
                
            self.logger.info(f"üíæ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(self.resume_data)} –∏–∑ {self.session_state['successful_resumes']}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ: {e}")

    def save_checkpoint(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            checkpoint_data = {
                'timestamp': datetime.now().isoformat(),
                'current_page': self.session_state['current_page'],
                'processed_urls': list(self.session_state['processed_urls']),
                'failed_urls': list(self.session_state['failed_urls']),
                'successful_resumes': self.session_state['successful_resumes'],
                'driver_restarts': self.driver_restarts,
                'data_file': self.data_file  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }
            
            with open(self.checkpoint_file, 'w', encoding='utf-8') as f:
                json.dump(checkpoint_data, f, ensure_ascii=False, indent=2)
                
            self.session_state['last_checkpoint'] = datetime.now().isoformat()
            self.logger.debug(f"üíæ Checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.checkpoint_file}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è checkpoint: {e}")
    
    def is_driver_alive(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            if not self.driver:
                return False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            _ = self.driver.title
            self.logger.debug("üíì –î—Ä–∞–π–≤–µ—Ä –∂–∏–≤")
            return True
            
        except Exception as e:
            self.logger.warning(f"üíÄ –î—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
            return False
    
    def proactive_health_check(self):
        """üè• –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            if not self.driver:
                self.logger.warning("üö® –î—Ä–∞–π–≤–µ—Ä None - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                return False
                
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
            current_url = self.driver.current_url
            window_handles = self.driver.window_handles
            
            if not current_url or len(window_handles) == 0:
                self.logger.warning("üö® –î—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return False
                
            # –°–∫—Ä—ã—Ç—ã–π health check - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            return True
            
        except Exception as e:
            self.logger.warning(f"üö® Health check: –¥—Ä–∞–π–≤–µ—Ä –º–µ—Ä—Ç–≤ ({str(e)[:100]})")
            return False
    
    def auto_health_monitor(self):
        """üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        self.operations_since_check += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ N –æ–ø–µ—Ä–∞—Ü–∏–π
        if self.operations_since_check >= self.health_check_interval:
            self.operations_since_check = 0
            
            if not self.proactive_health_check():
                self.logger.warning("üè• –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                return self.restart_driver_bulletproof()
                
        return True

    def restart_driver_bulletproof(self):
        """Bulletproof –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        self.logger.warning("üîÑ Bulletproof –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –¥—Ä–∞–π–≤–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                    self.logger.debug("üóëÔ∏è –°—Ç–∞—Ä—ã–π –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except:
                    pass
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
            if not self.setup_driver():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
                return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ
            current_page = self.session_state.get('current_page', 1)
            if current_page > 1:
                recovery_url = f"{self.base_url}?page={current_page}"
                self.logger.info(f"üåê –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}")
                self.logger.info(f"üîó URL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_url}")
            else:
                recovery_url = self.base_url
                self.logger.info("üåê –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1")
            
            self.driver.get(recovery_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(3)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ
            try:
                from selenium.webdriver.support import expected_conditions as EC
                from selenium.webdriver.support.ui import WebDriverWait
                from selenium.webdriver.common.by import By
                
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".card.resume-link"))
                )
                self.logger.info("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å: {e}")
            
            self.driver_restarts += 1
            time.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è
            
            if self.is_driver_alive():
                self.logger.info(f"‚úÖ –î—Ä–∞–π–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (—Ä–µ—Å—Ç–∞—Ä—Ç #{self.driver_restarts})")
                self.consecutive_errors = 0
                return True
            else:
                self.logger.error("‚ùå –ù–æ–≤—ã–π –¥—Ä–∞–π–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    def execute_with_recovery(self, operation_name, operation_func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å recovery –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        self.operations_count += 1
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥—Ä–∞–π–≤–µ—Ä–∞
        if self.operations_count % 10 == 0:
            if not self.is_driver_alive():
                self.logger.warning(f"üè• –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                if not self.restart_driver_bulletproof():
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
        
        for attempt in range(3):
            try:
                self.logger.debug(f"üéØ {operation_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                result = operation_func(*args, **kwargs)
                
                if self.consecutive_errors > 0:
                    self.logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –ø–æ—Å–ª–µ {self.consecutive_errors} –æ—à–∏–±–æ–∫")
                    self.consecutive_errors = 0
                
                return result
                
            except Exception as e:
                self.consecutive_errors += 1
                self.logger.warning(f"‚ö†Ô∏è {operation_name} –æ—à–∏–±–∫–∞ #{self.consecutive_errors}: {e}")
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - —Ä–µ—Å—Ç–∞—Ä—Ç
                if self.consecutive_errors >= self.max_consecutive_errors:
                    self.logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–æ: {self.consecutive_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥")
                    
                    if self.driver_restarts >= self.max_driver_restarts:
                        raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤: {self.max_driver_restarts}")
                    
                    if not self.restart_driver_bulletproof():
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
                    
                    continue
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                time.sleep(2 ** attempt)
        
        raise Exception(f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_name} –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
    
    def safe_open_tab(self, url, title):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å recovery"""
        def _open_tab():
            self.driver.execute_script(f"window.open('{url}', '_blank');")
            handles = self.driver.window_handles
            self.logger.debug(f"üìÇ –í–∫–ª–∞–¥–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {title} | –í—Å–µ–≥–æ: {len(handles)}")
            return len(handles)
        
        return self.execute_with_recovery(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏: {title}", _open_tab)
    
    def safe_switch_to_tab(self, tab_index):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É"""
        def _switch_tab():
            handles = self.driver.window_handles
            if tab_index < len(handles):
                self.driver.switch_to.window(handles[tab_index])
                self.logger.debug(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É {tab_index}")
                return True
            return False
        
        return self.execute_with_recovery(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É {tab_index}", _switch_tab)
    
    def safe_close_tab(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏"""
        def _close_tab():
            self.driver.close()
            self.logger.debug("üóëÔ∏è –í–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            return True
        
        return self.execute_with_recovery("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏", _close_tab)
    
    def get_cards_with_llm_fallback(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å LLM fallback –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        def _get_cards():
            self.logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫...")
            start_time = time.time()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å LLM –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π!
            self.logger.info("üì° –í—ã–∑–æ–≤ find_resume_cards()...")
            cards = self.find_resume_cards()
            find_time = time.time() - start_time
            self.logger.info(f"‚úÖ find_resume_cards() –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {find_time:.1f}—Å, –Ω–∞–π–¥–µ–Ω–æ: {len(cards) if cards else 0}")
            
            if not cards:
                self.logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞—à–µ–ª –∫–∞—Ä—Ç–æ—á–∫–∏")
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫
            self.logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫...")
            card_data = []
            for i, card in enumerate(cards):
                try:
                    card_start_time = time.time()
                    self.logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}/{len(cards)}...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    card_info = self.parse_card_info(card)
                    
                    card_time = time.time() - card_start_time
                    self.logger.info(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ {card_time:.1f}—Å")
                    
                    if card_info and card_info.get('url'):
                        card_data.append({
                            'index': i,
                            'url': card_info['url'],
                            'title': card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                            'card_element': card,
                            'full_info': card_info
                        })
                        self.logger.info(f"üìÑ {card_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1}: –Ω–µ—Ç URL –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
                
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ {i}: {e}")
                    continue
            
            total_time = time.time() - start_time
            self.logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(card_data)} –∏–∑ {len(cards)} –∑–∞ {total_time:.1f}—Å")
            return card_data
        
        return self.execute_with_recovery("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å LLM", _get_cards)
    
    def ultimate_multitab_parsing(self, max_pages=3, max_cards_per_page=5):
        """ULTIMATE Multi-tab –ø–∞—Ä—Å–∏–Ω–≥ —Å LLM + bulletproof"""
        self.logger.info(f"üöÄ ULTIMATE –ø–∞—Ä—Å–∏–Ω–≥: {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, {max_cards_per_page} –∫–∞—Ä—Ç–æ—á–µ–∫")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
            if not self.driver:
                self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ULTIMATE –ø–∞—Ä—Å–µ—Ä–∞...")
                if not self.setup_driver():
                    raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä")
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                self.logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—é–º–µ...")
                self.driver.get(self.base_url)
                time.sleep(3)
                
                self.main_tab_handle = self.driver.current_window_handle
                self.logger.info("‚úÖ ULTIMATE –ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            for page_num in range(self.session_state['current_page'], max_pages + 1):
                self.logger.info(f"\n{'='*80}")
                self.logger.info(f"üìÑ ULTIMATE –°–¢–†–ê–ù–ò–¶–ê {page_num}")
                self.logger.info(f"{'='*80}")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π health check –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if not self.proactive_health_check():
                    self.logger.warning("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π health check –ø—Ä–æ–≤–∞–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    if not self.restart_driver_bulletproof():
                        self.logger.critical("üíÄ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                        break
                
                self.session_state['current_page'] = page_num
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å LLM –∞–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
                    all_cards = self.get_cards_with_llm_fallback()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    new_cards = []
                    for card in all_cards:
                        if card['url'] not in self.session_state['processed_urls']:
                            new_cards.append(card)
                        else:
                            self.logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {card['title']}")
                    
                    cards_to_process = new_cards[:max_cards_per_page]
                    self.logger.info(f"üéØ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(cards_to_process)} –∏–∑ {len(all_cards)}")
                    
                    if not cards_to_process:
                        self.logger.info("‚è≠Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
                        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º continue - –Ω—É–∂–Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        successful_count = 0
                        failed_count = 0
                    else:
                        # üîÑ –ù–û–í–´–ô –ü–û–î–•–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ —Å retry
                        self.logger.info(f"\nüéØ –ù–ê–î–ï–ñ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: {len(cards_to_process)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º")
                        
                        successful_count = 0
                        failed_count = 0
                        
                        for i, card in enumerate(cards_to_process, 1):
                            self.logger.info(f"\nüìã –ö–ê–†–¢–û–ß–ö–ê {i}/{len(cards_to_process)}: {card['title']}")
                        
                            try:
                                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
                                self.safe_open_tab(card['url'], card['title'])
                                self.safe_switch_to_tab(1)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º  
                                success = self.parse_single_card_with_retry(card, 1)
                                
                                if success:
                                    successful_count += 1
                                    self.logger.info(f"‚úÖ –ò–¢–û–ì–û —É—Å–ø–µ—à–Ω—ã—Ö: {successful_count}/{i}")
                                else:
                                    failed_count += 1
                                    self.logger.warning(f"‚ùå –ò–¢–û–ì–û –Ω–µ—É–¥–∞—á–Ω—ã—Ö: {failed_count}/{i}")
                                
                                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
                                try:
                                    self.safe_close_tab()
                                except:
                                    pass  # –í–∫–ª–∞–¥–∫–∞ –º–æ–≥–ª–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                                
                                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                                try:
                                    self.safe_switch_to_tab(0)
                                except:
                                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
                                    self.restart_driver_bulletproof()
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                                self.save_checkpoint()
                                
                                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
                                if i < len(cards_to_process):
                                    pause = random.uniform(1, 3)
                                    self.logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {pause:.1f}s –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π...")
                                    time.sleep(pause)
                                    
                            except Exception as e:
                                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π {card['title']}: {e}")
                                failed_count += 1
                                self.session_state['failed_urls'].add(card['url'])
                                
                                # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                                try:
                                    self.restart_driver_bulletproof()
                                except:
                                    pass
                    
                    self.logger.info(f"\nüìä –ò–¢–û–ì–ò –°–¢–†–ê–ù–ò–¶–´: ‚úÖ {successful_count} —É—Å–ø–µ—à–Ω—ã—Ö, ‚ùå {failed_count} –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
                    
                    self.logger.info(f"‚úÖ ULTIMATE —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if page_num < max_pages:
                        self.logger.info(f"‚è≠Ô∏è ULTIMATE –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}...")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                        if self.has_next_page():
                            if not self.go_to_next_page():
                                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                                break
                        else:
                            self.logger.info("üìÑ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç")
                            break
                        
                        time.sleep(random.uniform(2, 4))
                
                except Exception as e:
                    self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {e}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.print_ultimate_stats()
            return True
            
        except Exception as e:
            self.logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ULTIMATE –ü–ê–†–°–ò–ù–ì–ê: {e}")
            self.save_checkpoint()
            return False
        
        finally:
            self.cleanup_ultimate()
    
    def print_ultimate_stats(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ULTIMATE –ø–∞—Ä—Å–µ—Ä–∞"""
        self.logger.info(f"\n{'='*80}")
        self.logger.info(f"üéâ –ò–¢–û–ì–ò ULTIMATE –ü–ê–†–°–ò–ù–ì–ê")
        self.logger.info(f"{'='*80}")
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_state['successful_resumes']} —Ä–µ–∑—é–º–µ")
        self.logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(self.session_state['processed_urls']) - self.session_state['successful_resumes']}")
        self.logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {len(self.session_state['failed_urls'])}")
        self.logger.info(f"üîÑ –†–µ—Å—Ç–∞—Ä—Ç–æ–≤ –¥—Ä–∞–π–≤–µ—Ä–∞: {self.driver_restarts}")
        self.logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {self.session_state['current_page']}")
        self.logger.info(f"üíæ Checkpoint: {self.checkpoint_file}")
        self.logger.info(f"üìã –î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï: {self.data_file} ({len(self.resume_data)} —Ä–µ–∑—é–º–µ)")
        self.logger.info(f"üéØ RETRY –ú–ï–•–ê–ù–ò–ó–ú: –¥–æ {self.max_retries_per_card} –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É")
    
    def cleanup_ultimate(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ULTIMATE –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            if self.driver:
                self.driver.quit()
                self.logger.info("üßπ ULTIMATE –¥—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass

if __name__ == "__main__":
    parser = UltimateWorkUaParser()
    
    # –ë–µ—Ä–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py
    from config import PARSING_CONFIG
    max_pages = PARSING_CONFIG.get('max_pages', 5)
    max_cards = PARSING_CONFIG.get('max_cards_per_page', 20)
    
    success = parser.ultimate_multitab_parsing(max_pages=max_pages, max_cards_per_page=max_cards)  # üéØ –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó CONFIG!
    
    if success:
        print("\nüéä ULTIMATE –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("\nüíÄ ULTIMATE –ü–ê–†–°–ò–ù–ì –ü–†–ï–†–í–ê–ù, –ù–û CHECKPOINT –°–û–•–†–ê–ù–ï–ù!")