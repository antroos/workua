#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
–¢–µ –∂–µ –ø–æ–ª—è, —Ç–∞ –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import pandas as pd
import re
from datetime import datetime

def create_web_interface_csv():
    """–°–æ–∑–¥–∞–µ—Ç CSV —Å —Ç–µ–º–∏ –∂–µ –ø–æ–ª—è–º–∏ —á—Ç–æ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
    print("üìä –°–û–ó–î–ê–ù–ò–ï CSV –ö–ê–ö –í –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ï")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ –∂–µ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    with open('resume_data_20250801_024557.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑—é–º–µ: {len(data):,}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (JavaScript –∫–æ–¥)
    export_data = []
    
    for index, item in enumerate(data):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ –≥–æ—Ä–æ–¥ –∏–∑ age_location (–∫–∞–∫ –≤ JavaScript)
        age = '–ù–µ —É–∫–∞–∑–∞–Ω'
        location = '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        if item.get('age_location'):
            parts = item['age_location'].split(', ')
            if len(parts) >= 2:
                age = parts[0]  # "41 —Ä—ñ–∫"
                location = ', '.join(parts[1:])  # "–¢–µ—Ä–Ω—ñ–≤–∫–∞"
            else:
                location = item['age_location']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ full_text (–∫–∞–∫ –≤ JavaScript)
        skills = []
        if item.get('full_text'):
            # –ò—â–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞–≤—ã–∫–æ–≤
            skills_match = re.search(r'–ó–Ω–∞–Ω–Ω—è —ñ –Ω–∞–≤–∏—á–∫–∏\s*([\s\S]*?)(?:\n\n|\n–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è|\n–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é|$)', 
                                   item['full_text'], re.IGNORECASE)
            if skills_match and skills_match.group(1):
                skills_text = skills_match.group(1)
                skills = [s.strip() for s in skills_text.split('\n') if s.strip() and len(s.strip()) > 1]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∫–∞–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
        detailed_info = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        detailed_info.append(f"üë§ –ò–º—è: {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        detailed_info.append(f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {item.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        detailed_info.append(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {item.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        detailed_info.append(f"üìç –í–æ–∑—Ä–∞—Å—Ç –∏ –ª–æ–∫–∞—Ü–∏—è: {item.get('age_location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        detailed_info.append(f"üîó URL: {item.get('url', item.get('link', '#'))}")
        
        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        if item.get('experience'):
            detailed_info.append("\nüìã –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
            if isinstance(item['experience'], list):
                for exp in item['experience']:
                    detailed_info.append(f"  ‚Ä¢ {exp}")
            else:
                detailed_info.append(f"  ‚Ä¢ {item['experience']}")
        
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if item.get('education_employment'):
            detailed_info.append(f"\nüéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {item['education_employment']}")
        
        # –ù–∞–≤—ã–∫–∏
        if skills:
            detailed_info.append(f"\nüîß –ù–∞–≤—ã–∫–∏ ({len(skills)}):")
            for skill in skills[:15]:  # –ü–µ—Ä–≤—ã–µ 15 –Ω–∞–≤—ã–∫–æ–≤
                detailed_info.append(f"  ‚Ä¢ {skill}")
            if len(skills) > 15:
                detailed_info.append(f"  ... –∏ –µ—â–µ {len(skills) - 15} –Ω–∞–≤—ã–∫–æ–≤")
        
        # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
        if item.get('full_text'):
            full_text_preview = item['full_text'][:500]
            detailed_info.append(f"\nüìÑ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {full_text_preview}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        row = {
            'ID': index + 1,
            '–ò–º—è': item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å': item.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            '–ó–∞—Ä–ø–ª–∞—Ç–∞': item.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            '–ì–æ—Ä–æ–¥': location,
            '–í–æ–∑—Ä–∞—Å—Ç': age,
            '–ù–∞–≤—ã–∫–∏': ', '.join(skills[:10]) if skills else '–ù–µ —É–∫–∞–∑–∞–Ω—ã',  # –ü–µ—Ä–≤—ã–µ 10 –Ω–∞–≤—ã–∫–æ–≤
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–Ω–∞–≤—ã–∫–æ–≤': len(skills),
            '–û–ø—ã—Ç': ', '.join(item.get('experience', [])) if isinstance(item.get('experience'), list) else str(item.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω')),
            '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': item.get('education_employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'URL': item.get('url', item.get('link', '#')),
            '–ü–æ–¥—Ä–æ–±–Ω–æ': '\n'.join(detailed_info),  # –ü–æ–ª–Ω–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        }
        
        export_data.append(row)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    df = pd.DataFrame(export_data)
    
    # –ò–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_filename = f'web_interface_resume_data_{timestamp}.csv'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV (—Å BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel)
    df.to_csv(csv_filename, index=False, encoding='utf-8-sig')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(df)
    with_names = len(df[df['–ò–º—è'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'])
    with_skills = len(df[df['–ù–∞–≤—ã–∫–∏'] != '–ù–µ —É–∫–∞–∑–∞–Ω—ã'])
    with_salary = len(df[df['–ó–∞—Ä–ø–ª–∞—Ç–∞'] != '–ù–µ —É–∫–∞–∑–∞–Ω–∞'])
    
    print()
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê CSV:")
    print(f"   üìö –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total:,}")
    print(f"   üë§ –° –∏–º–µ–Ω–∞–º–∏: {with_names:,} ({with_names/total*100:.1f}%)")
    print(f"   üîß –° –Ω–∞–≤—ã–∫–∞–º–∏: {with_skills:,} ({with_skills/total*100:.1f}%)")
    print(f"   üí∞ –° –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {with_salary:,} ({with_salary/total*100:.1f}%)")
    print()
    print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {csv_filename}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print()
    print("üìã –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π):")
    print(df.head().to_string(index=False))
    
    return csv_filename

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    csv_file = create_web_interface_csv()
    print()
    print("üéâ CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!")
    print(f"üìÅ –§–∞–π–ª: {csv_file}")
    print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")

if __name__ == "__main__":
    main()